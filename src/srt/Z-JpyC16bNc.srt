1
00:00:11,400 --> 00:00:14,410
Welcome back to web.dev LIVE - APAC edition.

2
00:00:15,660 --> 00:00:18,700
Now, it's been great to be together over the last two days.

3
00:00:19,040 --> 00:00:21,580
And now let's finish strong on day three.

4
00:00:23,670 --> 00:00:26,500
We've spoken about the role the Web has played with you

5
00:00:26,540 --> 00:00:29,300
building websites that share COVID data online, allowing

6
00:00:30,010 --> 00:00:33,130
work and learning to happen from home, much needed

7
00:00:33,130 --> 00:00:36,550
entertainment, and keeping up with world news.

8
00:00:38,390 --> 00:00:40,850
One of the big shifts we've seen is around retail and

9
00:00:40,850 --> 00:00:43,890
commerce. Now online retail has nearly doubled

10
00:00:43,890 --> 00:00:46,980
its share of credit card spending, and e-commerce is now

11
00:00:46,980 --> 00:00:49,440
30% of retail, growing 15%

12
00:00:50,150 --> 00:00:51,570
in just 6 weeks.

13
00:00:51,900 --> 00:00:54,700
There's been a flood of activity as businesses rush to get

14
00:00:54,780 --> 00:00:55,780
online.

15
00:00:56,570 --> 00:00:59,160
Pedro Freitas, head of Loja Integrada, which is part

16
00:00:59,580 --> 00:01:02,790
of the VTEX platform, shared how they saw the doubling

17
00:01:02,790 --> 00:01:05,000
of sites being created every single day.

18
00:01:06,290 --> 00:01:08,960
When they saw this, they kindly offered unlimited plans

19
00:01:09,300 --> 00:01:10,340
for healthcare clients.

20
00:01:10,800 --> 00:01:14,050
When it comes to food we're back to 1992 levels

21
00:01:14,050 --> 00:01:16,800
of share between groceries and restaurant orders.

22
00:01:17,140 --> 00:01:19,310
My omelets are certainly looking a lot better.

23
00:01:19,680 --> 00:01:21,770
And then there's the story of Foodleh.

24
00:01:21,770 --> 00:01:25,100
A couple of university students quickly built a site

25
00:01:25,140 --> 00:01:28,230
to allow people to order directly from the local street

26
00:01:28,230 --> 00:01:31,030
hawkers in Singapore, bridging the online-offline

27
00:01:31,610 --> 00:01:34,280
gap. And then there's Sebastian Carbonero,

28
00:01:34,820 --> 00:01:37,570
a high school student from San Marcos, California,

29
00:01:37,780 --> 00:01:40,830
who jumped into action to create FoodBanks, a website

30
00:01:41,540 --> 00:01:43,700
that helps you find, well, local food banks.

31
00:01:43,950 --> 00:01:46,540
Now, we continue to be impressed with the ingenuity that

32
00:01:46,540 --> 00:01:48,830
some of you are displaying as you help people in need right

33
00:01:48,830 --> 00:01:49,840
now.

34
00:01:49,920 --> 00:01:52,630
And speaking of being impressed, we're really fortunate to

35
00:01:52,630 --> 00:01:55,720
have a really healthy framework ecosystem on the web where

36
00:01:55,720 --> 00:01:58,140
different approaches can be explored in different ways.

37
00:01:58,890 --> 00:02:01,390
Now, Vue is a popular and well-loved framework with

38
00:02:01,680 --> 00:02:04,020
particularly large usage in the APAC region.

39
00:02:04,600 --> 00:02:07,350
So we wanted to invite Evan You, the creator of Vue, for a

40
00:02:07,350 --> 00:02:08,350
chat.

41
00:02:09,270 --> 00:02:10,110
Hi Dion, nice to be here.

42
00:02:10,110 --> 00:02:11,860
Hey, Evan, thanks so much for joining us.

43
00:02:12,360 --> 00:02:14,650
Now, I'd kinda love to start at the beginning of the

44
00:02:14,780 --> 00:02:17,240
history of Vue and the story as you've gone through

45
00:02:17,660 --> 00:02:20,070
different evolutions from version 1 to 2, and now

46
00:02:20,740 --> 00:02:22,120
what you're working on with version 3.

47
00:02:22,620 --> 00:02:25,500
Sure. Vue started out as a personal

48
00:02:25,540 --> 00:02:28,170
experimental project back in 2013

49
00:02:28,620 --> 00:02:32,040
and was first made public in February 2014.

50
00:02:32,630 --> 00:02:35,170
The initial goal was really just to create something

51
00:02:35,670 --> 00:02:37,510
that I would enjoy using myself.

52
00:02:37,590 --> 00:02:39,840
It was a very small library combining the data

53
00:02:40,800 --> 00:02:43,890
binding that was inspired by Angular 1 with

54
00:02:43,930 --> 00:02:46,890
a ES5 getter/setter based reactivity

55
00:02:46,890 --> 00:02:47,890
system.

56
00:02:48,850 --> 00:02:51,690
Because we used getter/setters, it was not a IE8

57
00:02:52,150 --> 00:02:54,820
compatible when it came out, which a lot of people took

58
00:02:54,820 --> 00:02:57,780
issues with, but I'm kinda glad we made that decision

59
00:02:58,070 --> 00:02:59,070
in the early days.

60
00:02:59,700 --> 00:03:03,030
Later on we released version 2 and started

61
00:03:03,120 --> 00:03:05,910
adding more and more supporting

62
00:03:06,160 --> 00:03:07,450
libraries to it.

63
00:03:07,500 --> 00:03:11,000
So, for example, we added a router, we added a CLI.

64
00:03:12,080 --> 00:03:15,340
So as we added more parts, it started to become more like

65
00:03:15,420 --> 00:03:16,420
a framework.

66
00:03:17,880 --> 00:03:19,170
But we still kinda loosely

67
00:03:20,970 --> 00:03:24,260
followed the concept that it should be incrementally

68
00:03:24,260 --> 00:03:27,600
adoptable so it's not as

69
00:03:28,430 --> 00:03:31,060
monolithic as some other solutions,

70
00:03:31,850 --> 00:03:33,650
but also it's no longer just a single

71
00:03:34,940 --> 00:03:36,650
library that does only one thing.

72
00:03:38,360 --> 00:03:41,410
The major change in version 2 was the introduction of

73
00:03:41,490 --> 00:03:44,030
the virtual DOM as the underlying rendering layer which

74
00:03:44,910 --> 00:03:47,490
opened up a few interesting capabilities at the time.

75
00:03:47,620 --> 00:03:50,910
For example, server-side rendering or rendering to

76
00:03:51,250 --> 00:03:52,630
other platforms.

77
00:03:53,250 --> 00:03:56,130
Right now we are hard at work in finishing up version 3,

78
00:03:56,710 --> 00:03:59,720
which is a major rewrite and it brings up

79
00:03:59,720 --> 00:04:02,720
a lot of new interesting features and

80
00:04:02,720 --> 00:04:03,720
changes.

81
00:04:04,010 --> 00:04:06,560
There are so many things, so I'll just mention a few

82
00:04:07,140 --> 00:04:08,140
highlights here.

83
00:04:08,390 --> 00:04:11,440
We added the composition API, which exposes the

84
00:04:11,440 --> 00:04:14,100
lower level reactivity API's inside view

85
00:04:14,940 --> 00:04:17,610
for advanced larger composition and reduce

86
00:04:18,110 --> 00:04:19,150
large applications.

87
00:04:19,610 --> 00:04:22,400
We rewrote the reactivity system using ES2015

88
00:04:22,820 --> 00:04:26,160
proxies, which greatly improved performance.

89
00:04:27,240 --> 00:04:30,040
The rendering layer rewrite is also seeing

90
00:04:30,250 --> 00:04:32,370
great performance improvements.

91
00:04:33,040 --> 00:04:36,090
The bundler, the library

92
00:04:36,090 --> 00:04:38,880
itself is now fully tree-shaking compatible, so you will

93
00:04:38,960 --> 00:04:40,380
see smaller bundles.

94
00:04:41,050 --> 00:04:44,090
We added first class TypeScript support, more modular

95
00:04:44,090 --> 00:04:46,800
internal architecture for better maintenance

96
00:04:47,220 --> 00:04:48,220
and tooling integration.

97
00:04:48,680 --> 00:04:51,390
So there is a lot more we are

98
00:04:51,680 --> 00:04:52,690
shipping in Vue 3.

99
00:04:52,940 --> 00:04:55,980
We are still hard at work, ironing out some

100
00:04:55,980 --> 00:04:58,570
of the rough edges, but it's going to be ready very soon.

101
00:04:59,190 --> 00:04:59,690
102
01:05:17,083 --> 01:05:19,333
quite a while with 2013 being the birth of Vue

102
00:05:05,110 --> 00:05:07,780
and obviously you worked on the Web before then.

103
00:05:08,160 --> 00:05:11,290
I'm curious, as you've seen the evolutions and

104
00:05:11,290 --> 00:05:14,620
seen what's going on right now, how do you feel about

105
00:05:14,750 --> 00:05:16,920
Web development in 2020?

106
00:05:18,040 --> 00:05:19,630
What are the most pressing issues?

107
00:05:19,670 --> 00:05:21,090
What are you focusing on?

108
00:05:21,260 --> 00:05:23,130
What are the problems that you see that Web developers

109
00:05:23,130 --> 00:05:26,090
have, and how do you feel you and Vue can help there?

110
00:05:26,930 --> 00:05:27,930
Sure.

111
00:05:28,260 --> 00:05:30,720
I think the ecosystem right now is at a transition

112
00:05:31,600 --> 00:05:33,310
period where we are seeing a lot of

113
00:05:34,640 --> 00:05:38,110
these new language standards features,

114
00:05:38,150 --> 00:05:40,480
new platform capabilities are

115
00:05:41,650 --> 00:05:44,900
finally stable and consistent and shipped

116
00:05:44,950 --> 00:05:46,950
in all these evergreen browsers.

117
00:05:46,990 --> 00:05:50,330
So all these mainstream browsers

118
00:05:50,580 --> 00:05:53,500
in their latest version now have very consistent support

119
00:05:53,500 --> 00:05:54,870
for these latest features.

120
00:05:56,120 --> 00:05:58,130
And IE11 is finally on the way of phasing

121
00:05:59,380 --> 00:06:01,170
out. So that presents an opportunity

122
00:06:02,880 --> 00:06:05,220
for new stacks or new

123
00:06:07,340 --> 00:06:10,010
tooling to break free of the shackles of these legacy

124
00:06:10,010 --> 00:06:12,350
problems and rethink how we can

125
00:06:13,020 --> 00:06:15,480
best take advantage of these new features that we

126
00:06:16,350 --> 00:06:19,650
can finally use for the large majority

127
00:06:19,650 --> 00:06:22,820
of our users. So I think,

128
00:06:23,070 --> 00:06:24,070
for example, most

129
00:06:26,110 --> 00:06:28,530
of these major browsers now support native ES module

130
00:06:28,530 --> 00:06:31,620
imports, which present some interesting

131
00:06:33,410 --> 00:06:36,210
technical possibilities that we can leverage to

132
00:06:36,660 --> 00:06:39,630
build something - to rethink

133
00:06:39,670 --> 00:06:40,960
our development workflow.

134
00:06:41,460 --> 00:06:44,050
Got it. Yeah, I've actually been watching you in your

135
00:06:44,210 --> 00:06:46,970
Twitter feed explore some of these things.

136
00:06:47,670 --> 00:06:50,090
I've seen you working on Vite and VitePress.

137
00:06:51,090 --> 00:06:53,510
I was wondering if you could explain a little bit more on

138
00:06:55,140 --> 00:06:56,020
what these are doing.

139
00:06:56,020 --> 00:06:57,020
Sure.

140
00:06:58,440 --> 00:06:59,440
Vite is

141
00:07:01,860 --> 00:07:04,900
a web development build tool that combines a dev

142
00:07:05,030 --> 00:07:06,440
server with a build step.

143
00:07:07,190 --> 00:07:09,570
Now, the interesting part is in the dev server, we are

144
00:07:09,570 --> 00:07:12,910
leveraging the browsers native ES module import

145
00:07:12,910 --> 00:07:16,500
handling to provide a bundle free development experience.

146
00:07:16,830 --> 00:07:19,710
So instead of bundling your whole app, Vite

147
00:07:20,040 --> 00:07:22,920
lets the browser import your modules as needed,

148
00:07:23,920 --> 00:07:27,380
using native imports and only processing them on-demand

149
00:07:27,590 --> 00:07:29,220
when the browser actually requests them.

150
00:07:29,630 --> 00:07:32,800
So this has a few advantages over the traditional

151
00:07:32,800 --> 00:07:34,470
bundling-based dev servers.

152
00:07:35,060 --> 00:07:36,640
The first thing is when you have

153
00:07:38,020 --> 00:07:41,020
a large app you may have a lot of modules

154
00:07:41,100 --> 00:07:43,230
in your application but when you are working

155
00:07:44,150 --> 00:07:47,360
on a specific part of your application, maybe

156
00:07:47,360 --> 00:07:50,110
you only need to import a subset of these modules.

157
00:07:50,450 --> 00:07:52,910
So on-demand import compilation

158
00:07:53,530 --> 00:07:56,330
using Vite's approach allows you to only compile

159
00:07:56,580 --> 00:07:59,580
the necessary modules for the part that you're

160
00:07:59,620 --> 00:08:02,620
actually working on. So this results in a much faster

161
00:08:03,500 --> 00:08:05,840
server startup time in large applications.

162
00:08:06,130 --> 00:08:08,460
The second part is Vite also supports Hot Module

163
00:08:09,130 --> 00:08:11,760
Replacement on top of native ES module imports.

164
00:08:12,130 --> 00:08:15,220
Now, with native use module imports,

165
00:08:15,470 --> 00:08:18,140
because we don't have to do the whole bundling scope

166
00:08:18,390 --> 00:08:20,770
crawling when handling Hot Module Replacement,

167
00:08:22,230 --> 00:08:24,610
the implementation is actually much simpler and much more

168
00:08:24,650 --> 00:08:25,650
efficient.

169
00:08:26,400 --> 00:08:28,480
So it will stay blazing fast even

170
00:08:29,940 --> 00:08:33,070
as your app grows which keeps the

171
00:08:33,240 --> 00:08:35,570
development feedback loop fast no matter how big

172
00:08:36,280 --> 00:08:37,280
your app is.

173
00:08:38,120 --> 00:08:40,830
So I believe this really presents an

174
00:08:42,410 --> 00:08:45,000
interesting option because the development experience is so

175
00:08:45,000 --> 00:08:48,000
close to the old days where we first got into

176
00:08:48,000 --> 00:08:50,510
web development, where you just have an index.html

177
00:08:51,340 --> 00:08:54,180
page and you import some scripts to

178
00:08:54,680 --> 00:08:57,430
get things going. Vite tries to

179
00:08:58,260 --> 00:09:01,180
simplify the whole development setup

180
00:09:03,020 --> 00:09:05,600
and present a development experience as close to

181
00:09:06,060 --> 00:09:08,480
the original vanilla web development experience as

182
00:09:08,650 --> 00:09:11,230
possible, but without giving up all the modern

183
00:09:12,030 --> 00:09:14,400
new tooling capabilities that we are used to.

184
00:09:14,530 --> 00:09:16,570
So it's still

185
00:09:17,660 --> 00:09:20,290
kind of experimental at this stage, but we're getting

186
00:09:20,870 --> 00:09:23,120
a lot of good feedback from users already.

187
00:09:23,540 --> 00:09:25,330
Got it. That's really exciting.

188
00:09:25,370 --> 00:09:27,580
I love this new trend towards

189
00:09:28,670 --> 00:09:31,250
dev time not having to deal with bundling

190
00:09:31,880 --> 00:09:34,220
and the like and production. We can still obviously do a

191
00:09:34,220 --> 00:09:36,970
lot of that, push out all of the optimizations we can.

192
00:09:37,300 --> 00:09:39,390
Obviously, everything we can do to help users makes sense.

193
00:09:40,680 --> 00:09:41,930
So that's Vite. What about VitePress?

194
00:09:42,640 --> 00:09:44,060
Well, how does that tie into this?

195
00:09:44,180 --> 00:09:45,350
Oh yeah.

196
00:09:46,400 --> 00:09:48,860
If you don't know VitePress, VitePress is a remake

197
00:09:49,610 --> 00:09:52,610
of VuePress and VuePress is a static side

198
00:09:52,610 --> 00:09:55,650
generator built on top of Vue, which allows

199
00:09:55,650 --> 00:09:59,070
you to write markdown, use Vue components

200
00:09:59,070 --> 00:10:02,290
in your markdown, and write custom themes using

201
00:10:02,290 --> 00:10:04,200
Vue as a Vue application.

202
00:10:04,710 --> 00:10:07,250
Now VuePress was based on webpack,

203
00:10:08,290 --> 00:10:11,420
so VitePress is essentially a remake of VuePress, but using

204
00:10:11,420 --> 00:10:12,840
Vite as the underlying

205
00:10:14,380 --> 00:10:15,380
build tool.

206
00:10:19,680 --> 00:10:22,390
So first of all, that provides obviously a much faster

207
00:10:23,350 --> 00:10:26,560
development experience, a faster server startup, and faster

208
00:10:26,940 --> 00:10:28,270
updates when you edit a page.

209
00:10:28,900 --> 00:10:31,980
Another aspect of it is we are baking a lot of

210
00:10:32,360 --> 00:10:34,360
performance best practices into VitePress.

211
00:10:39,660 --> 00:10:42,240
We see a lot of static side generators based on

212
00:10:42,660 --> 00:10:44,330
universal JavaScript frameworks.

213
00:10:45,000 --> 00:10:48,040
For example, we have Next.js, which is

214
00:10:48,830 --> 00:10:51,670
nuxt.js for Vue, which are both excellent projects, but

215
00:10:51,960 --> 00:10:55,010
when we are using services to

216
00:10:55,010 --> 00:10:58,180
send static content to the client we often face

217
00:10:58,180 --> 00:11:01,180
the problem of the double payload issue, where

218
00:11:01,430 --> 00:11:03,970
you're sending the static content as HTML, but you're also

219
00:11:03,970 --> 00:11:06,730
sending a lot of JavaScript which was used to render the

220
00:11:06,890 --> 00:11:09,600
same content, which is

221
00:11:09,940 --> 00:11:11,440
useless when it's on a client.

222
00:11:11,560 --> 00:11:14,440
And then we're spending time on the client to hydrate those

223
00:11:14,440 --> 00:11:16,150
content using JavaScript.

224
00:11:16,610 --> 00:11:18,950
So there's a lot of room for improvement here and VuePress

225
00:11:20,490 --> 00:11:21,490
tries to tackle that.

226
00:11:22,070 --> 00:11:25,120
It takes advantage of Vue 3's compiler to

227
00:11:25,120 --> 00:11:27,040
do static analysis and we automatically

228
00:11:28,210 --> 00:11:30,870
detect all the static parts that won't change

229
00:11:31,580 --> 00:11:32,670
in your page.

230
00:11:33,420 --> 00:11:36,340
Then we concatenate them - stringify

231
00:11:36,420 --> 00:11:38,840
them - into static strings and eventually

232
00:11:39,420 --> 00:11:42,090
safely remove them during the production build.

233
00:11:42,430 --> 00:11:45,720
So that decouples the current page JavaScript

234
00:11:45,720 --> 00:11:48,930
payload of your page from the content.

235
00:11:49,480 --> 00:11:51,310
So you're only paying for the dynamic

236
00:11:52,770 --> 00:11:55,820
bits inside your page and all the static

237
00:11:55,820 --> 00:11:57,280
content will have no impact on

238
00:11:58,820 --> 00:12:01,360
the JavaScript payload size and have no impact on the

239
00:12:01,740 --> 00:12:03,530
client side hydration performance.

240
00:12:04,830 --> 00:12:08,040
So I think that's a pretty significant improvement

241
00:12:08,040 --> 00:12:11,120
to how VuePress was handling things.

242
00:12:14,330 --> 00:12:17,460
When we finish it, we're excited to see how much of

243
00:12:17,460 --> 00:12:20,590
a performance improvement this can bring to our users

244
00:12:20,590 --> 00:12:21,590
across the board.

245
00:12:21,930 --> 00:12:24,510
Got it. I have a feeling we're going to be hitting some

246
00:12:24,510 --> 00:12:26,350
core web vital thresholds here.

247
00:12:27,220 --> 00:12:28,560
That sounds great. Thank you.

248
00:12:30,270 --> 00:12:33,230
Now we're going live to livestream right

249
00:12:33,270 --> 00:12:36,440
now to an APAC-friendly time zone

250
00:12:36,570 --> 00:12:39,570
and we talked about how Vue is a particularly

251
00:12:39,650 --> 00:12:42,610
popular in APAC, and I was curious on

252
00:12:43,160 --> 00:12:45,950
what you think caused that and what we can learn from that?

253
00:12:46,410 --> 00:12:48,580
I think Vue's popularity in APAC

254
00:12:50,500 --> 00:12:52,160
definitely has a lot to do with me

255
00:12:53,620 --> 00:12:54,620
being Asian.

256
00:12:55,880 --> 00:12:58,420
Personally, I am very active in the Chinese developer

257
00:12:58,420 --> 00:12:59,630
community as well, and a

258
00:13:01,420 --> 00:13:03,760
lot of people probably heard about Vue through me.

259
00:13:03,840 --> 00:13:05,220
But at the same time, a more

260
00:13:06,970 --> 00:13:10,060
important aspect is good localization of our

261
00:13:10,560 --> 00:13:11,560
documentation.

262
00:13:12,560 --> 00:13:16,190
So when we first worked on the documentation,

263
00:13:16,480 --> 00:13:19,110
because I am a native Chinese speaker and I know a lot of

264
00:13:19,110 --> 00:13:21,440
Chinese developers sort of struggle when

265
00:13:22,530 --> 00:13:25,610
they see really dense technical text written in English.

266
00:13:26,450 --> 00:13:28,830
It's not that they cannot attempt to read it.

267
00:13:28,950 --> 00:13:32,080
It's just when you are reading something

268
00:13:32,080 --> 00:13:35,620
that's not in your native tongue, it takes so much longer.

269
00:13:36,330 --> 00:13:38,500
It makes it so much less efficient to learn.

270
00:13:38,790 --> 00:13:41,670
It takes much longer to get the click when you're learning

271
00:13:41,670 --> 00:13:43,800
something new with the language that you're

272
00:13:44,670 --> 00:13:45,680
not used to. So

273
00:13:48,510 --> 00:13:51,470
I wrote the first draft, the first version of

274
00:13:51,470 --> 00:13:53,680
the Vue documentation in Chinese.

275
00:13:54,100 --> 00:13:56,900
Later on, when we had a bigger community, community members

276
00:13:56,940 --> 00:14:00,320
started to contribute more and more to these translations.

277
00:14:01,440 --> 00:14:04,490
They started taking over the maintenance of the Chinese

278
00:14:04,490 --> 00:14:07,360
docs and we're seeing a lot of contributions

279
00:14:07,450 --> 00:14:10,080
to translate Vue docs into other languages as well.

280
00:14:10,450 --> 00:14:12,700
So I think this good

281
00:14:13,580 --> 00:14:15,750
internationalization, localization effort is

282
00:14:16,670 --> 00:14:19,540
definitely critical in helping Vue's

283
00:14:19,750 --> 00:14:21,290
adoption in these areas.

284
00:14:24,170 --> 00:14:26,680
From my personal experience,

285
00:14:30,350 --> 00:14:32,930
particularly in areas where English is not the first

286
00:14:33,140 --> 00:14:34,890
language, you typically see that the

287
00:14:36,350 --> 00:14:38,440
channel for local developers to keep up to

288
00:14:39,350 --> 00:14:41,360
date with the latest information, to keep

289
00:14:42,360 --> 00:14:44,610
up to date with the new things

290
00:14:45,320 --> 00:14:48,450
happening in the front-end world

291
00:14:49,030 --> 00:14:50,030
is they rely

292
00:14:52,200 --> 00:14:54,740
on a few key community leaders who are proficient in

293
00:14:55,000 --> 00:14:57,500
English to translate the content for them.

294
00:14:59,500 --> 00:15:02,380
So it's a great effort by these community leaders, but they

295
00:15:02,540 --> 00:15:04,840
are not obliged to do this.

296
00:15:04,960 --> 00:15:08,260
And when there are not enough of them,

297
00:15:08,340 --> 00:15:11,340
this creates a bottleneck for the content and

298
00:15:11,340 --> 00:15:14,720
information to flow into - to reach

299
00:15:14,760 --> 00:15:16,470
these developers in these areas.

300
00:15:16,560 --> 00:15:19,890
So if, say, a framework

301
00:15:20,020 --> 00:15:23,110
or a tooling or a community

302
00:15:23,110 --> 00:15:25,940
that takes internationalization and localization as a first

303
00:15:25,940 --> 00:15:28,240
class concern, it definitely will help a lot in

304
00:15:28,860 --> 00:15:30,570
reaching these developers in a much

305
00:15:31,910 --> 00:15:32,910
bigger scale.

306
00:15:33,160 --> 00:15:34,870
That makes a ton of sense.

307
00:15:35,580 --> 00:15:36,580
I've seen that on a few developer sites.

308
00:15:37,250 --> 00:15:40,370
I remember one tried to add translations just through

309
00:15:40,370 --> 00:15:43,210
machine translation and they noticed that a lot of the

310
00:15:43,210 --> 00:15:46,590
developers were switching to English, thinking that it was

311
00:15:47,170 --> 00:15:49,630
just that they were familiar with English and the like.

312
00:15:49,630 --> 00:15:52,550
And then it was only when they went through a lot of it was

313
00:15:52,590 --> 00:15:55,600
the community actually taking the time to build

314
00:15:55,680 --> 00:15:58,020
a really high quality translations like you're talking

315
00:15:58,020 --> 00:16:00,690
about. And then everyone kind of flipped back to that.

316
00:16:01,020 --> 00:16:02,650
So that that makes a ton of sense.

317
00:16:02,770 --> 00:16:05,730
Now, before we go, I happened to notice that you're a

318
00:16:05,730 --> 00:16:08,150
karaoke fan, as am I.

319
00:16:08,610 --> 00:16:11,070
And I just wanted to ask if you have a go-to song?

320
00:16:11,740 --> 00:16:13,910
Yeah. Don't stop me now by Queen.

321
00:16:16,160 --> 00:16:18,910
Nice. Nice. Yeah, mine is Sweet Child of Mine.

322
00:16:19,830 --> 00:16:22,870
So now on that note, before we start singing, I'm already

323
00:16:22,870 --> 00:16:25,090
getting ready to jump to the mic.

324
00:16:26,000 --> 00:16:28,920
We'll have to have a karaoke session sometime.

325
00:16:29,340 --> 00:16:31,420
But thank you so much for joining us, Evan.

326
00:16:31,760 --> 00:16:34,930
Thanks for all that you do and all that the Vue community

327
00:16:34,930 --> 00:16:35,890
does for the Web.

328
00:16:35,890 --> 00:16:36,890
Thanks for having me.

329
00:16:37,600 --> 00:16:39,930
Evan just spoke about his experimentation with a

330
00:16:39,970 --> 00:16:42,100
bundle-free developer experience.

331
00:16:42,560 --> 00:16:44,900
And on day one, we spoke about the work we've been doing to

332
00:16:44,900 --> 00:16:46,770
understand bundlers with Tooling.Report.

333
00:16:49,230 --> 00:16:51,400
Now, understanding what's going on in these bundles is

334
00:16:51,400 --> 00:16:54,200
really important and is one area that we're looking to

335
00:16:54,200 --> 00:16:55,320
explore in Lighthouse.

336
00:16:55,780 --> 00:16:58,280
So please welcome Paul Irish to tell us more.

337
00:16:58,950 --> 00:17:01,960
Thanks, Dion. So we have all spent a good amount of

338
00:17:01,960 --> 00:17:04,370
time configuring our bundles and our

339
00:17:05,130 --> 00:17:06,750
approach to bundling strategies.

340
00:17:07,460 --> 00:17:10,090
But ultimately, there is a lack of transparency when it

341
00:17:10,090 --> 00:17:12,420
comes to the JavaScript getting all bundled up and shipped

342
00:17:12,420 --> 00:17:13,430
into production.

343
00:17:14,050 --> 00:17:16,890
They're just these big files and it's easy for us to treat

344
00:17:17,220 --> 00:17:18,510
them as black boxes.

345
00:17:18,760 --> 00:17:20,810
And some of us on the Lighthouse team have worked on

346
00:17:20,810 --> 00:17:23,100
community tools like Source Map Explorer,

347
00:17:23,850 --> 00:17:26,270
Source Map Visualization to help us

348
00:17:26,860 --> 00:17:29,770
understand what's happening inside of these files.

349
00:17:31,070 --> 00:17:34,030
And we've long wanted to bring some of that inspection

350
00:17:34,110 --> 00:17:36,870
into Lighthouse itself. So I want to show you a little

351
00:17:37,070 --> 00:17:40,030
sneak peek of some upcoming Lighthouse features that

352
00:17:40,030 --> 00:17:41,410
we hope are going to help a little bit.

353
00:17:42,660 --> 00:17:45,580
The first one is a new audit called

354
00:17:46,040 --> 00:17:47,040
'Remove Unused JavaScript'.

355
00:17:47,460 --> 00:17:50,670
Now, this is actually in Lighthouse 6.0, and it is listing

356
00:17:50,710 --> 00:17:51,710
all - by file -

357
00:17:54,380 --> 00:17:56,930
the top JavaScript files that are unused and is giving you

358
00:17:56,930 --> 00:17:59,510
an idea of what percentage of them - how many bytes of them

359
00:17:59,510 --> 00:18:00,810
- are actually unused.

360
00:18:01,970 --> 00:18:04,810
This is great, and it's actually just like what you see in

361
00:18:04,930 --> 00:18:06,690
the coverage panel in Chrome DevTools.

362
00:18:08,100 --> 00:18:10,820
But we can improve this. If we know a little bit more about

363
00:18:10,940 --> 00:18:13,860
the actual JavaScript bundles, we can actually explore them

364
00:18:13,940 --> 00:18:16,990
and see OK for each bundle file, what are all of the

365
00:18:17,070 --> 00:18:19,280
original modules that were on disk source

366
00:18:20,280 --> 00:18:23,540
files and understand how much of them

367
00:18:23,620 --> 00:18:24,910
were unused and used?

368
00:18:25,250 --> 00:18:28,540
And this really helps us understand a bit more

369
00:18:28,540 --> 00:18:31,710
about the kind of code that is not actually being

370
00:18:31,710 --> 00:18:32,710
run.

371
00:18:33,920 --> 00:18:36,880
Another new audit that we're introducing is one that

372
00:18:37,180 --> 00:18:39,430
identifies duplicate modules across JavaScript

373
00:18:40,300 --> 00:18:42,720
bundles. So in this case, you actually see that lodash

374
00:18:43,560 --> 00:18:45,600
is in two separate JavaScript bundles.

375
00:18:46,060 --> 00:18:48,140
But we are really happy that this helps you

376
00:18:49,150 --> 00:18:52,110
see exactly cases where

377
00:18:52,190 --> 00:18:55,400
you probably could reconsider your chunking strategy

378
00:18:55,940 --> 00:18:58,570
to make for something a little bit more optimized.

379
00:18:59,740 --> 00:19:02,950
Another new audit is called 'Legacy JavaScript'.

380
00:19:03,790 --> 00:19:06,700
What we're doing here is we're trying to find all the cases

381
00:19:07,000 --> 00:19:09,750
where you're shipping JavaScript to production -

382
00:19:09,960 --> 00:19:12,420
and specifically to modern browsers - where you're

383
00:19:12,420 --> 00:19:14,960
including things like polyfills and you're compiling

384
00:19:16,090 --> 00:19:19,050
down to a level

385
00:19:19,090 --> 00:19:21,800
where the modern browsers don't really need them.

386
00:19:21,890 --> 00:19:24,680
Modern browsers understand a lot of modern JavaScript, and

387
00:19:24,680 --> 00:19:27,100
so we want to make sure that you're not over compiling.

388
00:19:27,640 --> 00:19:31,150
Legacy JavaScript identifies polyfills and transforms

389
00:19:31,190 --> 00:19:33,820
and tells you what exactly it found in each file so that

390
00:19:33,820 --> 00:19:36,730
you can re-optimize your deployment strategy.

391
00:19:37,740 --> 00:19:39,610
Got it, and is this all powered by source maps?

392
00:19:39,860 --> 00:19:41,280
Yeah. Yeah, exactly.

393
00:19:41,490 --> 00:19:43,950
Source maps are are super useful and they

394
00:19:44,950 --> 00:19:47,500
enable this really powerful analysis.

395
00:19:48,080 --> 00:19:50,000
And actually, if I can,

396
00:19:51,170 --> 00:19:54,420
we're working on a interactive UI for

397
00:19:54,500 --> 00:19:56,300
exploring this stuff in more detail.

398
00:19:56,750 --> 00:19:59,090
And so I want to show this - these are early mocks -

399
00:20:00,130 --> 00:20:03,140
but we wanted to

400
00:20:03,180 --> 00:20:06,260
provide that kind of rich interactive tree

401
00:20:06,260 --> 00:20:07,890
map experience inside the tool as

402
00:20:09,350 --> 00:20:12,310
well. So this UI might look

403
00:20:12,310 --> 00:20:14,980
a little familiar to you if you use some of these tools

404
00:20:14,980 --> 00:20:18,150
before. But giving you a view of across

405
00:20:18,190 --> 00:20:20,360
all your JavaScript files, and if there's a bundle and if

406
00:20:20,360 --> 00:20:22,240
we can understand what's inside of it, we'll show it.

407
00:20:22,280 --> 00:20:23,870
And you can explore that more detail.

408
00:20:24,410 --> 00:20:27,830
We're really excited to provide

409
00:20:28,120 --> 00:20:30,460
a bunch more information around here and augment it with

410
00:20:30,460 --> 00:20:33,370
data around code coverage so that you can see

411
00:20:33,710 --> 00:20:36,790
exactly what's happening at a table view

412
00:20:36,840 --> 00:20:39,590
to help prioritize all of the major things you should be

413
00:20:39,670 --> 00:20:43,090
paying attention to, and let you explore it in detail

414
00:20:43,130 --> 00:20:45,550
so you can really find out what's happening and what you

415
00:20:45,550 --> 00:20:46,720
could change.

416
00:20:47,260 --> 00:20:49,100
So, again, it's early.

417
00:20:49,350 --> 00:20:51,020
This will all change quite a bit.

418
00:20:51,100 --> 00:20:53,980
But we're really excited about bringing this experience to

419
00:20:54,100 --> 00:20:55,100
you.

420
00:20:55,480 --> 00:20:58,440
It's all coming soon to a Lighthouse near you.

421
00:20:59,530 --> 00:21:02,490
Got it. I'm always - I always love kind of opening

422
00:21:02,530 --> 00:21:05,740
up some of the old bundles and seeing all of the mistakes

423
00:21:05,740 --> 00:21:07,910
I've made in the past. I'm excited to play around with

424
00:21:07,910 --> 00:21:11,160
this. Now, a few weeks ago, we also shipped

425
00:21:11,700 --> 00:21:14,790
Lighthouse 6.0 and I bet that's the version where we

426
00:21:14,790 --> 00:21:17,340
now started to include Core Web Vitals.

427
00:21:17,380 --> 00:21:17,790
Is that right?

428
00:21:17,790 --> 00:21:20,380
Yeah, that's right. All right. So Core Web Vitals, we got

429
00:21:20,380 --> 00:21:21,760
these three metrics, Largest Contentful Paint, First Input
Delay,

430
00:21:23,550 --> 00:21:26,340
and Cumulative Layout Shift, though it's worth pointing out

431
00:21:26,430 --> 00:21:28,180
that FID, First Input Delay, is

432
00:21:29,890 --> 00:21:31,350
a field metric.

433
00:21:32,100 --> 00:21:35,100
And since Lighthouse is a lab tool, in

434
00:21:35,100 --> 00:21:37,230
its place we have another metric TBT, total

435
00:21:38,110 --> 00:21:41,400
blocking time. We like to think of this as FIDs

436
00:21:41,610 --> 00:21:42,820
lab companion.

437
00:21:43,650 --> 00:21:45,820
So they're not measuring exactly the same thing, but

438
00:21:45,860 --> 00:21:48,530
they're all about interactivity, they're all about long

439
00:21:49,160 --> 00:21:51,950
tasks on the main thread, and heavily influenced by them.

440
00:21:52,330 --> 00:21:54,120
So it really works well.

441
00:21:54,330 --> 00:21:56,460
So in Lighthouse 6.0, you'll see these three metrics up

442
00:21:56,460 --> 00:21:57,460
top.

443
00:21:58,330 --> 00:22:01,000
And if you're looking at it and your report looks like this

444
00:22:01,000 --> 00:22:04,220
one, then you're like, wow, OK, well, these metrics

445
00:22:04,220 --> 00:22:06,180
are - they're not great.

446
00:22:06,220 --> 00:22:08,090
Looks like I can make some improvements here.

447
00:22:08,340 --> 00:22:09,720
All right. But what's the next step?

448
00:22:10,140 --> 00:22:13,310
We've added some new audits to

449
00:22:13,310 --> 00:22:14,930
help point you in the right direction.

450
00:22:15,600 --> 00:22:17,730
So I'll go right through them right now.

451
00:22:18,350 --> 00:22:20,060
First one I'll show is this,

452
00:22:22,230 --> 00:22:23,230
Avoid long main thread tasks.

453
00:22:23,610 --> 00:22:26,650
So here we're just listing the longest tasks

454
00:22:26,860 --> 00:22:29,070
on the main thread that you have, how long they took, and

455
00:22:29,820 --> 00:22:32,120
what URL we can attribute them to.

456
00:22:33,910 --> 00:22:36,290
And then two more. We have the largest contentful paint

457
00:22:36,290 --> 00:22:38,080
element. The metric itself is telling

458
00:22:39,250 --> 00:22:42,040
you at what time that paint happened, but that paint was

459
00:22:42,040 --> 00:22:44,960
associated with a particular DOM element, and here, this

460
00:22:44,960 --> 00:22:47,970
will just tell you. And similarly for cumulative layout

461
00:22:47,970 --> 00:22:50,600
shift, you want to know what the actual shifts were?

462
00:22:50,680 --> 00:22:53,060
Well, these were the DOM elements that shifted.

463
00:22:53,890 --> 00:22:56,810
And these ones contributed most to your total

464
00:22:56,890 --> 00:22:57,940
CLS value.

465
00:22:59,270 --> 00:23:02,190
So you could just read this,

466
00:23:02,770 --> 00:23:04,690
and so you'll see this content container.

467
00:23:05,030 --> 00:23:07,530
OK, yeah, I know what that is. But then if you're looking

468
00:23:07,530 --> 00:23:09,990
at these other two items and you're like, OK, but

469
00:23:10,450 --> 00:23:12,030
which actual DOM element is this?

470
00:23:12,660 --> 00:23:15,950
If you run Lighthouse through DevTools, we actually have

471
00:23:16,120 --> 00:23:18,540
a nice little surprise for you. So there, we kind

472
00:23:19,170 --> 00:23:21,330
of upgrade these element references.

473
00:23:21,420 --> 00:23:23,960
So if you hover over them, we'll actually just

474
00:23:25,250 --> 00:23:28,340
apply that element inspection hover tooltip

475
00:23:28,550 --> 00:23:29,550
that you normally get in DevTools.

476
00:23:30,180 --> 00:23:32,220
And if you click through, you'll see it in the DOM tree

477
00:23:32,220 --> 00:23:33,550
elements panel.

478
00:23:33,760 --> 00:23:35,560
So that's kind of integration to help you understand

479
00:23:35,560 --> 00:23:37,060
exactly what thing you're looking at.

480
00:23:38,430 --> 00:23:41,310
This is just a small slice of the new stuff in 6.0, please

481
00:23:44,020 --> 00:23:46,730
check out our blog posts for all the rest of the fun stuff.

482
00:23:47,740 --> 00:23:49,570
Got it. I'm always a sucker for these audits.

483
00:23:49,610 --> 00:23:51,950
It's great to be able to kind of just go from the metrics

484
00:23:51,950 --> 00:23:55,080
themselves in the scores and really go deeper to understand

485
00:23:55,080 --> 00:23:57,200
what's affecting them. Thanks so much, Paul.

486
00:23:57,950 --> 00:24:00,500
I love how we're making sure to open up as much data

487
00:24:00,920 --> 00:24:03,210
as we can with the Chrome User Experience Report.

488
00:24:03,840 --> 00:24:06,420
And I keep seeing great mashups and analysis from the

489
00:24:06,420 --> 00:24:09,470
community, such as the Onely Map, which lets you

490
00:24:09,470 --> 00:24:12,180
kind of zoom around the world and kind of explore the

491
00:24:12,430 --> 00:24:15,180
performance characteristics for a different device types

492
00:24:15,430 --> 00:24:16,810
and obviously different locations.

493
00:24:17,140 --> 00:24:19,850
Now, Lighthouse is a great tool to help you audit your web

494
00:24:19,850 --> 00:24:22,980
apps, and it helps you not only with just performance

495
00:24:22,980 --> 00:24:24,980
of course, but really across the board.

496
00:24:25,650 --> 00:24:28,360
And we want you to be free to create the highest quality

497
00:24:28,360 --> 00:24:31,200
web apps that give you the biggest reach to users across

498
00:24:31,280 --> 00:24:32,610
whatever device they're using.

499
00:24:32,740 --> 00:24:35,410
Now to hear more about the latest in PWAs and advanced

500
00:24:35,870 --> 00:24:37,660
capabilities, let's welcome Pete LePage.

501
00:24:38,490 --> 00:24:39,910
Awesome. Thanks, Dion.

502
00:24:40,370 --> 00:24:43,580
We believe that you should be able to build and deliver

503
00:24:43,750 --> 00:24:45,290
any kind of app on the Web.

504
00:24:45,960 --> 00:24:48,460
Web apps should be able to deliver the same kinds of

505
00:24:48,460 --> 00:24:50,510
experiences with the same capabilities as

506
00:24:51,590 --> 00:24:52,590
native apps.

507
00:24:53,090 --> 00:24:55,970
Combining the installability and reliability of progressive

508
00:24:56,180 --> 00:24:59,180
web apps with our capabilities project, we're

509
00:24:59,180 --> 00:25:02,140
working to close the gap, and help you build

510
00:25:02,230 --> 00:25:03,770
and deliver great experiences.

511
00:25:05,480 --> 00:25:07,190
To do that, we've been focusing on three things.

512
00:25:07,610 --> 00:25:09,860
First, we've been working hard to give you and

513
00:25:10,780 --> 00:25:14,280
users more control over the install experience,

514
00:25:14,570 --> 00:25:18,030
removing the mini infobar, adding an install promotion

515
00:25:18,030 --> 00:25:19,540
to the omnibox, and more.

516
00:25:20,540 --> 00:25:23,370
But one of my favorite things about the Web is how

517
00:25:23,370 --> 00:25:25,000
ubiquitous it is.

518
00:25:25,500 --> 00:25:28,210
We know that for some businesses, it's really important

519
00:25:28,790 --> 00:25:30,710
to have your app in the store.

520
00:25:31,590 --> 00:25:34,510
At Chrome Dev Summit we previewed a library and CLI

521
00:25:35,010 --> 00:25:37,090
called Bubble Wrap, then called Llama-Pack.

522
00:25:38,100 --> 00:25:41,140
It makes it trivial to get your PWA into the

523
00:25:41,140 --> 00:25:43,060
Play Store. In fact PWAbuilder.com

524
00:25:44,480 --> 00:25:46,690
now uses Bubble Wrap under the hood.

525
00:25:47,060 --> 00:25:48,310
In just a few mouse clicks.

526
00:25:48,440 --> 00:25:50,940
I can generate an APK that I can upload to the Play

527
00:25:51,480 --> 00:25:54,860
Store. Second, we're providing tighter

528
00:25:54,900 --> 00:25:56,280
integration with the operating system.

529
00:25:56,280 --> 00:25:59,280
Like the ability to share a photo, song, or

530
00:25:59,280 --> 00:26:01,620
whatever else by invoking the system-level

531
00:26:02,240 --> 00:26:03,250
share service.

532
00:26:03,500 --> 00:26:06,460
Or the other way around - being able to receive content

533
00:26:07,080 --> 00:26:08,920
when shared from other installed apps.

534
00:26:08,920 --> 00:26:10,840
You can keep users up to date or subtly

535
00:26:12,460 --> 00:26:14,630
notify them of new activity with app badging.

536
00:26:15,340 --> 00:26:18,220
And make it easy for users

537
00:26:18,430 --> 00:26:20,970
to quickly start an action using app shortcuts which

538
00:26:21,510 --> 00:26:22,520
will land in Chrome 84.

539
00:26:23,560 --> 00:26:26,730
And finally, we're working to enable new capabilities

540
00:26:26,980 --> 00:26:29,860
that enable new scenarios that weren't possible before.

541
00:26:30,230 --> 00:26:33,440
Like editors that read and write files on the user's

542
00:26:33,440 --> 00:26:36,610
local file system, or getting a list of locally

543
00:26:36,610 --> 00:26:39,700
installed fonts so that users can use them in their design.

544
00:26:40,120 --> 00:26:41,450
Of course, there's plenty more.

545
00:26:41,580 --> 00:26:44,620
So stay tuned. But I hear, Dion, you've been

546
00:26:44,620 --> 00:26:46,290
playing with the TikTok PWA.

547
00:26:46,620 --> 00:26:49,330
That's right. That is my 10-year-old son, Josh, who started

548
00:26:49,330 --> 00:26:51,920
to create some really fun TikTok content, even though

549
00:26:52,380 --> 00:26:54,920
he was pretty restricted these days to the house and

550
00:26:55,380 --> 00:26:56,380
the pets and the like.

551
00:26:57,170 --> 00:27:00,390
And he kept bugging me to join in and play

552
00:27:00,390 --> 00:27:01,390
myself.

553
00:27:02,350 --> 00:27:05,270
And yeah, I was a little bit gun shy,

554
00:27:05,310 --> 00:27:07,810
so to speak, on that side. But it actually gave me a great

555
00:27:07,810 --> 00:27:10,600
excuse to play with a really well built PWA

556
00:27:10,900 --> 00:27:13,320
that the TikTok Web team put together that I didn't even

557
00:27:13,320 --> 00:27:16,400
know about. It Is really, really a nice, rich

558
00:27:16,820 --> 00:27:17,780
experience there.

559
00:27:17,780 --> 00:27:18,650
That's really cool.

560
00:27:18,650 --> 00:27:20,530
And all of these things that we've been working on - things

561
00:27:20,950 --> 00:27:24,080
like the app shortcuts - are gonna be a great

562
00:27:24,080 --> 00:27:27,330
addition to them. The idea that you can push and hold

563
00:27:27,330 --> 00:27:30,330
on the app icon and be able to quickly jump in and

564
00:27:30,330 --> 00:27:31,330
create a new TikTok.

565
00:27:31,960 --> 00:27:34,420
Or push and hold and say, hey, I want to see my friends

566
00:27:34,670 --> 00:27:37,260
TikToks. Or the ability to be able to show app badges

567
00:27:37,970 --> 00:27:40,380
when a friend has posted something new or something like

568
00:27:40,380 --> 00:27:43,100
that. So there's plenty of great stuff coming that they

569
00:27:43,390 --> 00:27:45,220
can take advantage of. And so can you.

570
00:27:45,770 --> 00:27:46,970
That's excellent. Thanks again, Pete.

571
00:27:47,060 --> 00:27:47,810
Thank you.

572
00:27:47,810 --> 00:27:50,310
Now with that, it's time to close out the last opener.

573
00:27:50,940 --> 00:27:53,110
It's been a great pleasure being with you over the last

574
00:27:53,110 --> 00:27:55,610
three days, but we're not quite done yet.

575
00:27:56,030 --> 00:27:58,440
We've got a great set of content coming up today.

576
00:27:59,530 --> 00:28:01,950
Next, you're going to hear from Google engineers who hope

577
00:28:01,950 --> 00:28:04,450
you improve the reliability of your experience with

578
00:28:04,700 --> 00:28:06,740
advanced patterns for building PWAs.

579
00:28:07,750 --> 00:28:10,410
Then, how you can get them into the Play Store, and how to

580
00:28:10,410 --> 00:28:13,210
help you increase your conversion rate for notifications,

581
00:28:13,580 --> 00:28:14,840
and so much more.

582
00:28:16,170 --> 00:28:18,300
Now, if you're watching live, we'll be on the chat to

583
00:28:18,300 --> 00:28:20,050
answer your questions at web.dev/live.

584
00:28:21,800 --> 00:28:22,930
And, of course, on YouTube.

585
00:28:24,100 --> 00:28:25,640
But the fun isn't going to end today.

586
00:28:26,350 --> 00:28:29,100
Thanks to our amazing Google developer groups all across

587
00:28:29,100 --> 00:28:31,980
the world, we've got a set of follow-up events in the weeks

588
00:28:32,310 --> 00:28:34,860
to come. Where we'll have Googlers, Google developer

589
00:28:35,310 --> 00:28:37,980
experts, as well as experts from across the local

590
00:28:37,980 --> 00:28:40,780
communities joining you to share more insights and

591
00:28:40,780 --> 00:28:44,030
guidance. Just check out the regional events section

592
00:28:44,160 --> 00:28:47,330
on web.dev/live starting tomorrow to find

593
00:28:47,330 --> 00:28:49,160
the event that's in your time zone.

