1
00:00:14,780 --> 00:00:17,070
If users ever need to sign into your site, good

2
00:00:17,860 --> 00:00:20,320
sign-in form design is critical.

3
00:00:20,660 --> 00:00:23,740
This is especially true for people on poor connections, on

4
00:00:23,740 --> 00:00:26,410
mobile, in a hurry, or under stress.

5
00:00:26,910 --> 00:00:29,620
Now, more than ever, you need to ensure that sign-in

6
00:00:30,170 --> 00:00:32,210
isn't a barrier to using a site.

7
00:00:32,880 --> 00:00:35,840
Poorly designed sign-in forms get high bounce rate.

8
00:00:36,170 --> 00:00:39,220
And, you know, each bounce means a disgruntled user who's

9
00:00:39,220 --> 00:00:42,140
likely to exit your site, not just a missed sign-in

10
00:00:42,550 --> 00:00:43,560
opportunity.

11
00:00:43,850 --> 00:00:45,140
But first, a disclaimer.

12
00:00:45,220 --> 00:00:48,020
This video is about best practice

13
00:00:48,230 --> 00:00:50,900
for simple sign-in forms that use an email address and

14
00:00:51,060 --> 00:00:54,360
password. It doesn't explain how to use federated

15
00:00:54,360 --> 00:00:57,490
log-in with identity providers like Google or Facebook,

16
00:00:57,820 --> 00:01:00,240
or how to integrate with backend services.

17
00:01:00,780 --> 00:01:03,620
You can find out more about those topics from the links at

18
00:01:03,740 --> 00:01:06,040
the end of the article that goes with this video.

19
00:01:07,120 --> 00:01:10,460
So in this video, I'm going to talk about straightforward

20
00:01:10,460 --> 00:01:13,710
frontend coding best practice, mostly

21
00:01:13,750 --> 00:01:17,300
HTML, with a little bit of CSS and some JavaScript.

22
00:01:18,380 --> 00:01:21,510
I asked the Identity team at Chrome what I should talk

23
00:01:21,510 --> 00:01:24,720
about. And they said, get the basics of

24
00:01:25,100 --> 00:01:26,640
sign-in forms right.

25
00:01:27,060 --> 00:01:29,430
So be warned, this is simple stuff.

26
00:01:29,480 --> 00:01:30,690
It's not rocket science.

27
00:01:31,440 --> 00:01:34,110
And before we start, a quick reality check, you know, do

28
00:01:34,110 --> 00:01:36,610
you actually really need users to sign in to

29
00:01:37,070 --> 00:01:40,280
your site? People don't like being forced

30
00:01:40,400 --> 00:01:43,570
to hand over identity information, and all that personal

31
00:01:43,570 --> 00:01:46,620
data and the code that goes with it becomes a cost

32
00:01:46,740 --> 00:01:48,370
and a liability for you.

33
00:01:48,830 --> 00:01:51,580
If people can use your site without signing in,

34
00:01:51,790 --> 00:01:54,380
all the better. The best sign-in form is no sign-in form

35
00:01:55,130 --> 00:01:58,250
at all. Anyway, with all that out of the way, let's

36
00:01:58,250 --> 00:01:59,260
get on with it.

37
00:02:00,050 --> 00:02:03,050
First up, well formed HTML is the

38
00:02:03,050 --> 00:02:05,760
backbone of a good sign-in experience.

39
00:02:06,140 --> 00:02:07,930
Use the elements built for the job.

40
00:02:08,220 --> 00:02:11,390
They've been around for years: , , ,

41
00:02:11,480 --> 00:02:12,480
and .

42
00:02:12,770 --> 00:02:15,650
And as I'll show you, using these elements as intended

43
00:02:15,980 --> 00:02:18,320
enables built-in browser functionality, improves

44
00:02:18,940 --> 00:02:21,950
accessibility and adds meaning to your markup.

45
00:02:22,570 --> 00:02:24,820
Your basic HTML might start out something like

46
00:02:25,530 --> 00:02:26,530
this.

47
00:02:28,540 --> 00:02:29,620
So let's break that down.

48
00:02:30,330 --> 00:02:33,420
Now, you might be tempted to just wrap inputs

49
00:02:33,540 --> 00:02:37,040
in a
and handle input data submission

50
00:02:37,130 --> 00:02:38,460
purely with JavaScript.

51
00:02:38,750 --> 00:02:39,880
Well, don't do it!

52
00:02:40,090 --> 00:02:43,170
You know, it's just generally better to use a plain

53
00:02:43,260 --> 00:02:44,550
old element.

54
00:02:45,050 --> 00:02:47,760
This makes your site more accessible to screenreaders

55
00:02:48,260 --> 00:02:51,640
and other assistive devices and helps browsers

56
00:02:51,680 --> 00:02:54,850
understand the intention of your code to enable a whole

57
00:02:54,850 --> 00:02:57,690
lot of cross platform standardized built-in form

58
00:02:57,940 --> 00:02:59,320
features that I'll show you later.

59
00:03:00,980 --> 00:03:04,150
An HTML form also makes it simpler to build basic

60
00:03:04,150 --> 00:03:06,160
functional sign-in for older browsers and

61
00:03:07,280 --> 00:03:09,030
to enable sign-in even if JavaScript

62
00:03:10,290 --> 00:03:11,290
fails.

63
00:03:13,160 --> 00:03:14,160
So, first things first.

64
00:03:14,660 --> 00:03:17,170
To label an input, use a .

65
00:03:17,580 --> 00:03:19,040
There are two reasons for that.

66
00:03:19,500 --> 00:03:22,630
First reason: a tap or a click on a label moves

67
00:03:22,630 --> 00:03:24,970
focus to the input it's associated with.

68
00:03:25,550 --> 00:03:28,470
Second reason, screenreaders announced label text

69
00:03:28,720 --> 00:03:31,680
when the label or the labels input gets focus.

70
00:03:32,970 --> 00:03:34,020
Sign in, heading one.

71
00:03:35,140 --> 00:03:36,140
Email with hint.

72
00:03:36,850 --> 00:03:39,650
You associate a label with an input by giving the label's

73
00:03:39,730 --> 00:03:42,650
'for' attribute the same value as the input's id.

74
00:03:44,940 --> 00:03:48,320
Now, placeholders can be useful, but don't

75
00:03:48,410 --> 00:03:50,490
use them as input labels.

76
00:03:51,030 --> 00:03:53,700
People are liable to forget what the input was for once

77
00:03:53,910 --> 00:03:56,620
they've started entering text, especially if they get

78
00:03:56,620 --> 00:03:59,830
distracted. You know, was I entering an email address,

79
00:03:59,830 --> 00:04:01,540
a phone number, or an account ID?

80
00:04:02,130 --> 00:04:03,130
I can't remember!

81
00:04:03,920 --> 00:04:06,090
There are other potential problems with placeholders.

82
00:04:07,220 --> 00:04:10,220
And you can see the article that goes with this video

83
00:04:11,010 --> 00:04:12,140
if you're unconvinced.

84
00:04:13,390 --> 00:04:16,560
Now, it's probably best to put your labels above

85
00:04:16,560 --> 00:04:17,560
your inputs.

86
00:04:17,810 --> 00:04:20,810
This enables consistent design across mobile and

87
00:04:20,810 --> 00:04:23,980
desktop, and according to Google AI research,

88
00:04:24,320 --> 00:04:26,440
enables quicker scanning by users.

89
00:04:26,860 --> 00:04:29,700
You get full width labels and inputs and you don't need to

90
00:04:29,860 --> 00:04:32,780
adjust label and input width to fit the label text.

91
00:04:35,330 --> 00:04:38,410
Some sites force users to enter emails or passwords

92
00:04:38,460 --> 00:04:40,460
twice. That might reduce errors for a few

93
00:04:41,630 --> 00:04:44,670
users, but causes extra work for all

94
00:04:44,670 --> 00:04:47,670
users and can increase abandonment rates.

95
00:04:48,680 --> 00:04:51,510
I think it's better to enable users to confirm their email

96
00:04:51,590 --> 00:04:54,720
address, you'll need to do that anyway, and make

97
00:04:54,720 --> 00:04:57,350
it easy for them to reset that password.

98
00:04:57,980 --> 00:05:00,400
Next. Use for buttons!

99
00:05:00,900 --> 00:05:03,190
Button elements provide accessible behavior and

100
00:05:03,980 --> 00:05:06,940
built-in form submission functionality and they

101
00:05:06,940 --> 00:05:08,110
can easily be styled.

102
00:05:08,820 --> 00:05:11,490
There's no point in using a
or some other element

103
00:05:11,660 --> 00:05:12,870
pretending to be a button.

104
00:05:13,990 --> 00:05:17,000
Give the submit button in a sign-up or sign-in form a

105
00:05:17,000 --> 00:05:20,370
value that says what it does, such as "create

106
00:05:20,370 --> 00:05:21,370
account" or "sign-in".

107
00:05:22,040 --> 00:05:24,790
Not "submit" or "start", or whatever.

108
00:05:25,750 --> 00:05:29,010
Considered disabling the sign-in button once the user

109
00:05:29,010 --> 00:05:30,470
has tapped or clicked it.

110
00:05:31,050 --> 00:05:34,010
Many users click buttons multiple times, even

111
00:05:34,010 --> 00:05:36,310
on sites that are fast and responsive.

112
00:05:36,720 --> 00:05:39,390
That slows down interactions and can add to server

113
00:05:39,730 --> 00:05:40,730
load.

114
00:05:41,270 --> 00:05:44,440
Conversely, don't disable form submission awaiting user

115
00:05:44,440 --> 00:05:47,440
input. For example, like, don't just disable the sign-in

116
00:05:47,820 --> 00:05:50,490
button if something's missing or in the wrong format.

117
00:05:51,450 --> 00:05:54,240
Explain to the user what they need to do.

118
00:05:55,070 --> 00:05:57,870
This is a real example. I was urgently trying to sign-in to

119
00:05:58,290 --> 00:06:00,460
a site, and there was no way of knowing what

120
00:06:01,370 --> 00:06:02,370
I was doing wrong.

121
00:06:02,870 --> 00:06:05,750
Now that HTML code I showed you before

122
00:06:05,880 --> 00:06:08,760
is all valid and correct, but

123
00:06:08,880 --> 00:06:12,050
the default browser styling means it looks

124
00:06:12,050 --> 00:06:15,260
terrible and it's hard to use, especially on mobile.

125
00:06:15,930 --> 00:06:18,220
The default browser size for just about everything to do

126
00:06:18,260 --> 00:06:21,480
with forms is too small, especially on mobile.

127
00:06:22,140 --> 00:06:24,690
This might seem obvious, but you know it's a common problem

128
00:06:24,690 --> 00:06:26,650
with sign-in forms on lots of sites.

129
00:06:27,020 --> 00:06:30,280
In particular, the default size and padding for inputs

130
00:06:30,360 --> 00:06:33,360
and buttons is too small on desktop, and

131
00:06:33,400 --> 00:06:34,570
even worse on mobile.

132
00:06:35,530 --> 00:06:38,370
Here you can see the various minimum guidelines for target

133
00:06:38,450 --> 00:06:41,540
sizes. On that basis, I reckon you should add

134
00:06:41,580 --> 00:06:43,750
at least about 15 pixels of padding to input

135
00:06:44,670 --> 00:06:47,420
elements and buttons for mobile and around 10 px

136
00:06:47,710 --> 00:06:50,340
on desktop. But don't take my word for it.

137
00:06:50,380 --> 00:06:53,510
Try this out with real devices and real

138
00:06:53,510 --> 00:06:56,800
humans. And also make sure to provide enough

139
00:06:56,800 --> 00:06:58,430
space between inputs.

140
00:06:59,060 --> 00:07:02,230
Add enough margin to make inputs work well as touch

141
00:07:02,230 --> 00:07:04,560
targets. As a rough guide, that's about a finger

142
00:07:05,310 --> 00:07:06,310
width of margin.

143
00:07:07,060 --> 00:07:09,820
You should comfortably be able to tap each of your inputs

144
00:07:10,230 --> 00:07:12,740
and buttons without bumping into something else.

145
00:07:14,150 --> 00:07:17,200
You also need to make sure your inputs are clearly visible.

146
00:07:17,370 --> 00:07:19,950
Now the default border styling for inputs makes them hard

147
00:07:19,950 --> 00:07:23,120
to see. They're almost invisible on some platforms, such

148
00:07:23,120 --> 00:07:24,410
as Chrome for Android.

149
00:07:25,460 --> 00:07:26,790
So add a border.

150
00:07:27,290 --> 00:07:30,500
On a white background, a good general rule is to use a

151
00:07:30,920 --> 00:07:34,090
#ccc or darker. Or change the background color

152
00:07:34,130 --> 00:07:37,470
instead. I mean, whatever you do, make it blindingly

153
00:07:37,470 --> 00:07:39,550
obvious where to tap or click.

154
00:07:39,970 --> 00:07:42,970
And remember, design for thumbs.

155
00:07:43,600 --> 00:07:45,520
If you search for "touch target", you'll see lots of

156
00:07:45,520 --> 00:07:47,020
pictures of forefingers.

157
00:07:47,310 --> 00:07:50,060
However, in the real world, most people, many people use

158
00:07:50,440 --> 00:07:52,320
their thumbs to interact with phones.

159
00:07:52,860 --> 00:07:56,110
Thumbs are bigger than forefingers, and control is less

160
00:07:56,110 --> 00:07:57,110
precise.

161
00:07:57,570 --> 00:08:00,530
All the more reason for adequately sized touch targets.

162
00:08:01,580 --> 00:08:04,450
Now, as with form control dimensions and padding,

163
00:08:04,750 --> 00:08:07,290
the default browser font size for input elements and

164
00:08:07,670 --> 00:08:10,210
buttons is too small, particularly on mobile.

165
00:08:10,710 --> 00:08:13,920
Browsers on different platforms size fonts somewhat

166
00:08:13,920 --> 00:08:16,590
differently. So it's difficult to specify a particular font

167
00:08:16,590 --> 00:08:18,220
size that works well everywhere.

168
00:08:19,180 --> 00:08:22,430
A quick survey of popular websites shows sizes of

169
00:08:22,680 --> 00:08:25,220
around 13 to 16 px on desktop.

170
00:08:25,930 --> 00:08:28,600
Well, matching that physical size is a good minimum for

171
00:08:28,850 --> 00:08:30,100
text on mobile.

172
00:08:30,560 --> 00:08:33,110
And that means you need to use larger pixel sizes on

173
00:08:33,520 --> 00:08:36,940
mobile, generally. 16 px on Chrome on desktop

174
00:08:37,320 --> 00:08:39,530
is quite legible, but even if you have pretty

175
00:08:40,370 --> 00:08:43,200
good vision, it's difficult to read 16 px

176
00:08:43,330 --> 00:08:45,330
text on Chrome on Android.

177
00:08:45,700 --> 00:08:48,500
Lighthouse can help you automate the process of detecting

178
00:08:49,040 --> 00:08:50,920
text that's too small.

179
00:08:51,460 --> 00:08:54,420
Now let's talk about visual indicators for validation.

180
00:08:55,090 --> 00:08:57,420
Browsers have built-in features to do basic form

181
00:08:58,130 --> 00:09:00,760
validation for inputs with a type attribute.

182
00:09:01,550 --> 00:09:04,510
Browsers warn when you submit a form with an input

183
00:09:04,510 --> 00:09:07,180
value and set focus on the problematic input.

184
00:09:07,680 --> 00:09:09,230
You don't need to use JavaScript!

185
00:09:10,690 --> 00:09:14,020
Use the :invalid CSS selector to highlight

186
00:09:14,020 --> 00:09:14,980
invalid data.

187
00:09:15,650 --> 00:09:18,240
This is really widely supported by browsers

188
00:09:18,650 --> 00:09:20,780
and for more recent browsers, you can use

189
00:09:20,860 --> 00:09:23,950
:not(:placeholder-shown) to avoid selecting

190
00:09:23,950 --> 00:09:25,740
inputs with no content.

191
00:09:26,040 --> 00:09:29,120
Okay. We've touched on elements and a bit of CSS.

192
00:09:29,500 --> 00:09:32,130
Now I want to talk about attributes.

193
00:09:32,880 --> 00:09:35,290
This is where the magic really happens.

194
00:09:35,340 --> 00:09:37,960
Browsers have multiple helpful built-in

195
00:09:38,420 --> 00:09:41,630
features that use element attributes.

196
00:09:41,880 --> 00:09:42,890
So let's take a look.

197
00:09:44,260 --> 00:09:46,930
Add an 'autofocus' attribute to the first input in your

198
00:09:47,180 --> 00:09:50,230
sign-in form. That makes it clear where to start.

199
00:09:50,560 --> 00:09:53,650
And on desktop, at least, it means users don't

200
00:09:53,650 --> 00:09:56,230
have to select the input to start typing.

201
00:09:56,690 --> 00:09:59,030
Password inputs should, of course, have type="password"

202
00:10:00,490 --> 00:10:02,950
to hide password text and help browsers understand

203
00:10:03,570 --> 00:10:04,570
the meaning of the input.

204
00:10:05,530 --> 00:10:08,240
Using also means that browsers,

205
00:10:09,080 --> 00:10:12,210
such as Firefox, offer to save your password

206
00:10:12,210 --> 00:10:14,000
when a form is submitted.

207
00:10:15,670 --> 00:10:18,920
As I'll show you, browsers also used the 'name' and

208
00:10:19,010 --> 00:10:21,920
'id' attributes to work out the role of form

209
00:10:21,970 --> 00:10:22,970
inputs.

210
00:10:23,760 --> 00:10:26,850
Use to give mobile

211
00:10:26,850 --> 00:10:29,100
users an appropriate keyboard and enable basic

212
00:10:30,060 --> 00:10:33,190
built-in email address validation by the browser.

213
00:10:33,560 --> 00:10:35,230
Again, no JavaScript required!

214
00:10:36,150 --> 00:10:38,520
If you need to use a telephone number instead of an email

215
00:10:38,520 --> 00:10:41,490
address, enables

216
00:10:41,490 --> 00:10:43,490
a telephone keypad on mobile.

217
00:10:44,280 --> 00:10:47,160
You can also use the 'inputmode' attribute where necessary.

218
00:10:47,660 --> 00:10:51,040
inputmode ="numeric" is ideal for PIN numbers.

219
00:10:51,750 --> 00:10:53,000
But watch out!

220
00:10:53,460 --> 00:10:56,670
Using type="number" adds an up/down arrow

221
00:10:56,670 --> 00:10:57,920
to increment numbers.

222
00:10:58,170 --> 00:11:00,760
So don't use it for numbers that aren't meant to be

223
00:11:00,760 --> 00:11:03,590
incremented, such as telephone or PIN numbers.

224
00:11:04,760 --> 00:11:07,430
And while we're talking about keyboards, unfortunately,

225
00:11:08,100 --> 00:11:11,350
if you're not careful, mobile keyboards may cover

226
00:11:11,350 --> 00:11:14,310
your form or, worse, partially obscure the sign-in

227
00:11:14,520 --> 00:11:15,480
button.

228
00:11:15,810 --> 00:11:17,940
Users might get confused and give up before

229
00:11:18,900 --> 00:11:20,320
realizing what has happened.

230
00:11:20,900 --> 00:11:23,030
Avoid this where you can by displaying only

231
00:11:24,110 --> 00:11:27,200
the email, phone, and password inputs

232
00:11:27,530 --> 00:11:30,160
and the sign-in button at the top of your sign-in page.

233
00:11:30,700 --> 00:11:32,620
Put other content below.

234
00:11:33,120 --> 00:11:35,960
Now, I know, this won't be possible for every site,

235
00:11:36,170 --> 00:11:39,130
but whatever you do, test on a range of devices

236
00:11:39,130 --> 00:11:41,750
for your target audience and adjust accordingly.

237
00:11:42,670 --> 00:11:45,010
Some sites, including Amazon and eBay, avoid the

238
00:11:45,680 --> 00:11:48,970
problem by asking for email, phone and password

239
00:11:49,100 --> 00:11:50,260
in two stages.

240
00:11:50,810 --> 00:11:53,890
Now, this approach also simplifies the experience; the user

241
00:11:54,180 --> 00:11:57,020
is only tasked with one thing at a time.

242
00:11:58,020 --> 00:12:01,440
So, next up: the 'name' and 'autocomplete' attributes.

243
00:12:01,940 --> 00:12:04,690
These are a really powerful way for you to help browsers

244
00:12:04,900 --> 00:12:07,490
help users by storing data and autofilling

245
00:12:08,070 --> 00:12:09,070
inputs.

246
00:12:09,370 --> 00:12:10,530
There are two parts to this.

247
00:12:11,160 --> 00:12:13,410
The input 'name' attribute enables browsers to

248
00:12:14,160 --> 00:12:17,250
work out the role of various inputs so that they can

249
00:12:17,250 --> 00:12:20,130
store email addresses and other data for use with

250
00:12:20,330 --> 00:12:21,340
autocomplete.

251
00:12:21,960 --> 00:12:23,550
So don't make the browser guess.

252
00:12:24,380 --> 00:12:27,470
Some browsers, including Firefox, also take note

253
00:12:27,550 --> 00:12:29,550
of the 'id' and 'type' attributes.

254
00:12:30,220 --> 00:12:32,350
When the user later access as a sign-in form

255
00:12:33,180 --> 00:12:36,270
on the same site the 'autocomplete' attribute

256
00:12:36,270 --> 00:12:39,350
enables the browser to autofill inputs using the data

257
00:12:39,350 --> 00:12:40,940
its stored using the 'name' attribute.

258
00:12:41,440 --> 00:12:44,440
Now you need different behavior for password inputs in

259
00:12:44,480 --> 00:12:46,860
sign-up and sign-in forms.

260
00:12:48,070 --> 00:12:51,200
Don't add autofill to a password input in a sign-up

261
00:12:51,410 --> 00:12:54,490
form. The browser might already have a password

262
00:12:54,490 --> 00:12:57,580
stored for the site, and auto filling a password just

263
00:12:57,710 --> 00:13:01,000
doesn't make sense on sign-up: for example, if two people

264
00:13:01,000 --> 00:13:03,500
share the same device and one wants to create a new

265
00:13:04,050 --> 00:13:05,050
account.

266
00:13:06,260 --> 00:13:08,840
Use the appropriate password input 'name' to help the

267
00:13:08,840 --> 00:13:12,260
browser differentiate between new and current passwords.

268
00:13:12,800 --> 00:13:15,850
Use name="new-password" for the password input

269
00:13:15,850 --> 00:13:19,060
in a sign-up form and also for the new password

270
00:13:19,100 --> 00:13:20,980
in a changed password form.

271
00:13:22,100 --> 00:13:24,770
This tells the browser that you want it to store a new

272
00:13:25,230 --> 00:13:26,610
password for the site.

273
00:13:27,650 --> 00:13:30,780
Use name="current-password" for the password

274
00:13:30,780 --> 00:13:33,990
input in a sign-in form, or the input for the user's

275
00:13:34,080 --> 00:13:36,580
old password in a change-password form.

276
00:13:37,410 --> 00:13:40,000
This tells the browser that you want it to use the current

277
00:13:40,000 --> 00:13:42,920
password that it has stored for the site.

278
00:13:43,580 --> 00:13:46,710
Different browsers handle email autofill and password

279
00:13:46,710 --> 00:13:49,220
suggestions somewhat differently, but the effect is

280
00:13:49,800 --> 00:13:50,840
much the same.

281
00:13:51,220 --> 00:13:54,680
On Safari 11 and above on desktop, for example,

282
00:13:54,970 --> 00:13:57,520
the password manager is displayed and then biometric

283
00:13:57,970 --> 00:14:00,350
authentication - fingerprint or facial recognition -

284
00:14:01,270 --> 00:14:02,730
is used if available.

285
00:14:03,770 --> 00:14:05,820
Chrome on desktop displays email suggestions

286
00:14:06,820 --> 00:14:09,820
depending on what you type, shows the password manager,

287
00:14:09,940 --> 00:14:11,990
and then autofills the password.

288
00:14:13,360 --> 00:14:14,740
Now, here's another reason to use

289
00:14:14,780 --> 00:14:15,780
autocomplete="new-password".

290
00:14:17,200 --> 00:14:20,450
Modern browsers suggest a strong password

291
00:14:20,620 --> 00:14:23,580
if that's included for the password input

292
00:14:23,830 --> 00:14:26,840
in a sign up form. Use built-in browser

293
00:14:26,880 --> 00:14:27,880
password generators.

294
00:14:28,630 --> 00:14:31,670
That means users and developers don't need

295
00:14:31,670 --> 00:14:34,090
to work out what a strong password is.

296
00:14:34,220 --> 00:14:37,720
Since browsers can securely store passwords

297
00:14:37,850 --> 00:14:40,850
and autofill them as necessary, there's no

298
00:14:40,850 --> 00:14:44,230
need for users to remember or enter passwords

299
00:14:44,230 --> 00:14:47,230
and leave them on sticky notes attached

300
00:14:47,230 --> 00:14:48,230
to the computer.

301
00:14:49,650 --> 00:14:51,900
Add the 'required' attribute to both email and

302
00:14:52,700 --> 00:14:53,900
password fields.

303
00:14:54,740 --> 00:14:58,200
Modern browsers automatically prompt and set focus

304
00:14:58,200 --> 00:14:59,200
for missing data.

305
00:14:59,830 --> 00:15:02,200
And I'll say it again - no JavaScript required.

306
00:15:04,250 --> 00:15:06,250
So, I've talked about the basics of getting

307
00:15:07,290 --> 00:15:09,840
HTML and CSS right, but you're also going to need some

308
00:15:09,880 --> 00:15:10,840
JavaScript.

309
00:15:11,340 --> 00:15:13,630
Make sure to add a 'show password' icon or text

310
00:15:14,510 --> 00:15:17,340
button to enable users to check the text they've entered.

311
00:15:18,140 --> 00:15:20,560
And don't forget to add a 'forgot password' link.

312
00:15:21,430 --> 00:15:22,430
Here's

313
00:15:24,520 --> 00:15:26,150
how Gmail does it. It's really straightforward. You add a
listener

314
00:15:26,150 --> 00:15:29,480
to your button and in the handler toggle the password

315
00:15:29,570 --> 00:15:33,070
input type to text or password.

316
00:15:34,700 --> 00:15:37,320
Make sure to include an 'aria-label' to warn that the

317
00:15:37,450 --> 00:15:39,620
password will be displayed. Otherwise, users

318
00:15:40,490 --> 00:15:43,000
may inadvertently reveal passwords.

319
00:15:44,000 --> 00:15:46,670
Speaking of accessibility, use 'aria-describedby'

320
00:15:47,080 --> 00:15:50,000
to explain password constraints, using the element

321
00:15:50,090 --> 00:15:52,090
you use to describe your password requirements.

322
00:15:53,210 --> 00:15:55,840
Screen readers read the label text, the input type and

323
00:15:56,300 --> 00:15:57,300
then the description.

324
00:15:57,800 --> 00:16:00,850
Now you'll also want to validate data entry

325
00:16:00,850 --> 00:16:02,430
in real time and before submission. HTML

326
00:16:04,600 --> 00:16:07,600
elements and attributes have built-in features for

327
00:16:07,600 --> 00:16:10,940
basic validation, but you should also use JavaScript

328
00:16:10,940 --> 00:16:12,730
to do more robust validation while

329
00:16:13,860 --> 00:16:16,990
users are entering data and when they attempt

330
00:16:17,110 --> 00:16:18,110
to submit the form.

331
00:16:18,910 --> 00:16:21,780
Just bear in mind that this does not obviate the need to

332
00:16:21,780 --> 00:16:24,830
validate and sanitize data on the back end.

333
00:16:25,620 --> 00:16:27,830
The sign-in form code lab that goes with this

334
00:16:28,670 --> 00:16:31,590
video uses the Constraint Validation

335
00:16:31,630 --> 00:16:34,760
API, which is widely supported, to add

336
00:16:34,920 --> 00:16:37,930
custom validation using built-in browser UI

337
00:16:38,260 --> 00:16:40,850
to set focus and display prompts.

338
00:16:41,390 --> 00:16:44,520
Okay. One really important extra thing.

339
00:16:45,100 --> 00:16:48,190
'What you cannot measure, you cannot improve'

340
00:16:48,600 --> 00:16:51,560
is particularly true for sign-up and sign-in

341
00:16:51,770 --> 00:16:52,770
forms.

342
00:16:53,230 --> 00:16:55,480
You need to set goals, measure success, improve

343
00:16:56,150 --> 00:16:57,490
your site and repeat.

344
00:16:59,110 --> 00:17:01,490
Usability and lab testing are really helpful for trying out

345
00:17:01,490 --> 00:17:04,700
changes but you also need real world data

346
00:17:04,790 --> 00:17:07,910
to really understand how your users experience

347
00:17:07,910 --> 00:17:11,460
your sign-up and sign-in forms with analytics

348
00:17:11,630 --> 00:17:14,130
and Real User Measurement (or Monitoring).

349
00:17:15,210 --> 00:17:18,420
You'll need to monitor page analytics, including sign-up

350
00:17:18,670 --> 00:17:21,720
and sign-in page views, bounce rates, and

351
00:17:21,760 --> 00:17:22,760
exits.

352
00:17:23,300 --> 00:17:26,180
Make sure to add interaction analytics such as goal

353
00:17:26,430 --> 00:17:29,270
funnels. Where do users abandon your sign-up or sign-in

354
00:17:29,480 --> 00:17:32,690
flow? And events - you know - what actions

355
00:17:32,690 --> 00:17:34,820
do users take when interacting with your forms?

356
00:17:36,820 --> 00:17:39,900
And lastly, track website performance:

357
00:17:40,650 --> 00:17:42,990
use user-centric field metrics to understand the

358
00:17:43,660 --> 00:17:45,910
real experience of real users.

359
00:17:46,410 --> 00:17:48,200
Are your sign-up and sign-in forms slow to load, and, if

360
00:17:48,200 --> 00:17:49,200
so, what is the cause?

361
00:17:52,830 --> 00:17:55,880
And finally, some general guidelines to help reduce sign-in

362
00:17:56,130 --> 00:17:57,170
form abandonment.

363
00:17:59,340 --> 00:18:01,050
Number one: don't make users hunt for the sign-in!

364
00:18:02,010 --> 00:18:04,930
Put a link to the sign-in form at the top of the page,

365
00:18:04,970 --> 00:18:07,140
using well understood wording like "Sign-in", "Create

366
00:18:08,470 --> 00:18:09,930
Account", or "Register".

367
00:18:10,890 --> 00:18:13,810
Keep it focused. Sign-in forms are not the place to

368
00:18:13,900 --> 00:18:16,110
distract people with offers and features.

369
00:18:17,610 --> 00:18:18,980
Minimize complexity.

370
00:18:19,190 --> 00:18:22,200
Ask for other user data such as addresses or credit

371
00:18:22,200 --> 00:18:23,780
card details only when users see

372
00:18:25,240 --> 00:18:28,160
a clear benefit from providing that data.

373
00:18:29,950 --> 00:18:33,170
Before users start on your sign-up form, make clear

374
00:18:33,170 --> 00:18:35,040
what the value proposition is.

375
00:18:35,540 --> 00:18:37,210
How do they benefit from signing in?

376
00:18:37,540 --> 00:18:39,590
Give users concrete incentives to complete

377
00:18:40,510 --> 00:18:41,510
sign-up.

378
00:18:42,720 --> 00:18:45,680
If possible, allow users to identify themselves with

379
00:18:45,680 --> 00:18:48,180
a mobile phone number instead of an email address.

380
00:18:48,430 --> 00:18:50,310
Since that's the way some users want to

381
00:18:51,390 --> 00:18:53,270
do it, they may not want to use their email.

382
00:18:54,480 --> 00:18:56,940
Make it easy for users to reset their password and

383
00:18:57,560 --> 00:19:00,440
make the "Forgot your password?" link obvious.

384
00:19:01,780 --> 00:19:04,700
Make sure to link to your Terms of Service and Privacy

385
00:19:04,700 --> 00:19:07,950
Policy documents: make it clear to users from the start

386
00:19:08,410 --> 00:19:10,290
how you safeguard their data.

387
00:19:11,290 --> 00:19:14,330
And finally - finally - include branding for your

388
00:19:14,330 --> 00:19:17,420
company or organization on your sign-up and sign-in pages.

389
00:19:17,840 --> 00:19:19,630
Make sure your fonts, styles and tone

390
00:19:20,840 --> 00:19:23,170
of voice match the rest of your site.

391
00:19:23,800 --> 00:19:26,800
Some forms just feel like they don't belong to the

392
00:19:27,260 --> 00:19:28,640
same site as other content.

393
00:19:29,100 --> 00:19:32,220
Especially if they have a significantly different URL.

394
00:19:32,930 --> 00:19:35,270
So there you go. That's the basics of sign-in form

395
00:19:36,100 --> 00:19:37,150
best practice.

396
00:19:37,650 --> 00:19:40,820
You can find out more from the web.dev article that goes

397
00:19:40,820 --> 00:19:43,440
with this video, and the code lab that goes with that.

398
00:19:44,190 --> 00:19:46,450
I hope that's given you a few items to add to your next

399
00:19:46,570 --> 00:19:49,780
sprint to improve your web site's forms.

400
00:19:50,450 --> 00:19:52,700
Of course, sign-up and sign-in is not the only

401
00:19:53,540 --> 00:19:56,000
place that involves a lot of form filling that could be

402
00:19:56,000 --> 00:19:58,750
improved. So stay tuned for Eiji,

403
00:19:59,460 --> 00:20:01,920
who's going to talk through some of the new options for

404
00:20:01,920 --> 00:20:02,920
payments on the web.

