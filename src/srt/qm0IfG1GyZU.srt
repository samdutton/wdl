1
00:00:13,000 --> 00:00:15,670
Hi, I'm Una, a Developer Advocate on the Chrome team,

2
00:00:15,670 --> 00:00:17,340
focusing on CSS and Web UX.

3
00:00:18,300 --> 00:00:20,970
Thank you for joining me today. I am super excited to get

4
00:00:20,970 --> 00:00:23,930
started and talk about some magical lines of CSS that

5
00:00:23,930 --> 00:00:26,680
do some serious heavy lifting and let you build a robust

6
00:00:27,310 --> 00:00:28,310
modern layouts.

7
00:00:28,640 --> 00:00:31,440
Before we dive into that, there are a couple of key terms

8
00:00:31,640 --> 00:00:34,230
that will help you in your styling journeys and are super

9
00:00:34,230 --> 00:00:36,860
good to know about as we walk through these techniques.

10
00:00:37,530 --> 00:00:39,740
Most of the items I mentioning today are used in

11
00:00:39,740 --> 00:00:42,070
conjunction with grid or flexbox layout, and you

12
00:00:42,780 --> 00:00:45,120
can denote those as display:grid or display:flex

13
00:00:45,910 --> 00:00:46,910
on the parent element.

14
00:00:47,660 --> 00:00:50,160
The first key terms are fr and auto.

15
00:00:50,450 --> 00:00:53,170
These are used with grid layouts to denote fractional units

16
00:00:53,170 --> 00:00:55,670
of space - that's fr, or automatic space - that's

17
00:00:56,250 --> 00:00:59,420
auto - based on the minimum content size of the items

18
00:00:59,420 --> 00:01:01,880
within that element. For grid layout, we also have

19
00:01:02,380 --> 00:01:05,300
the minmax() function, which let's us set a minimum

20
00:01:05,340 --> 00:01:07,890
and maximum value within our layout bounds to enable

21
00:01:08,260 --> 00:01:10,060
responsive design without media queries!

22
00:01:10,640 --> 00:01:13,270
We also have separate min(), max(), and clamp() functions

23
00:01:13,270 --> 00:01:15,900
available in some browsers that bring logic to CSS.

24
00:01:17,060 --> 00:01:19,650
The browser determines which value to choose based on the

25
00:01:19,650 --> 00:01:22,320
function provided for min and max, and for clamp, we'd

26
00:01:22,700 --> 00:01:25,820
set both a min and max, with a relative value in between.

27
00:01:26,280 --> 00:01:28,580
We'll definitely be covering these within the video with a

28
00:01:28,620 --> 00:01:29,580
demo.

29
00:01:29,580 --> 00:01:32,370
And within these layouts, we can also use auto-fit or

30
00:01:32,460 --> 00:01:35,330
auto-fill to automatically place child elements

31
00:01:35,420 --> 00:01:36,420
into a parent grid.

32
00:01:36,830 --> 00:01:39,380
This is another tool for dynamic, responsive layouts

33
00:01:39,800 --> 00:01:41,210
without media queries.

34
00:01:41,630 --> 00:01:44,510
We're going to be going over all of those terms and more

35
00:01:44,720 --> 00:01:46,050
with demos galore.

36
00:01:46,720 --> 00:01:48,720
I'm really big nerd and I don't know why I made that rhyme

37
00:01:48,720 --> 00:01:50,720
and put that in this video, but I did so...

38
00:01:51,100 --> 00:01:53,930
So let's just dive into the demos and 1-line

39
00:01:54,190 --> 00:01:56,940
layouts. I made a handy little site called 1-Line

40
00:01:57,100 --> 00:01:59,610
Layouts at 1linelayouts.glitch.me

41
00:02:00,070 --> 00:02:02,650
so that you can follow along or play on your own and have a

42
00:02:02,650 --> 00:02:05,740
reference for the power that CSS can bring to your layouts.

43
00:02:06,570 --> 00:02:09,370
For our first 'single-line' layout, let's solve the biggest

44
00:02:09,370 --> 00:02:12,620
mystery in all the CSS land: centering things.

45
00:02:12,870 --> 00:02:14,750
I want you know it's easier than you think with

46
00:02:15,210 --> 00:02:17,460
place-items:center, I call this the Definitely

47
00:02:18,330 --> 00:02:19,500
Centered Layout.

48
00:02:19,840 --> 00:02:22,960
What we need to do is first specify the layout method,

49
00:02:23,010 --> 00:02:25,550
which is display grid here, and then we are going to write

50
00:02:25,550 --> 00:02:27,800
'place-items: center' This is that one magical

51
00:02:28,760 --> 00:02:31,350
line of code and I have these highlighted under the titles

52
00:02:31,350 --> 00:02:33,890
here. So what happens here is no matter what you put

53
00:02:34,480 --> 00:02:37,770
in here, it is going to stay centered to that parent

54
00:02:37,850 --> 00:02:40,980
element. So if we look at the HTML we have

55
00:02:40,980 --> 00:02:43,610
this parent and it's just getting background blue and then

56
00:02:43,610 --> 00:02:46,490
this child with a coral background and it's contenteditable

57
00:02:46,490 --> 00:02:49,370
so we can actually just type in here - we can have vertical

58
00:02:49,660 --> 00:02:52,950
content, 'Hello, world' - and even as I'm typing,

59
00:02:53,200 --> 00:02:56,290
this child element is staying centered within

60
00:02:56,370 --> 00:02:59,330
the parent box. So I think that this is a really cool

61
00:02:59,330 --> 00:03:02,000
technique. 'place-item: center' will solve all of your

62
00:03:02,000 --> 00:03:03,210
centered dilemmas.

63
00:03:03,960 --> 00:03:06,010
Next, we have the deconstructive pancake!

64
00:03:06,380 --> 00:03:08,680
This is something that we see all the time on marketing

65
00:03:08,680 --> 00:03:12,180
sites. You see this row of 3 items and usually

66
00:03:12,180 --> 00:03:14,770
on mobile, we'll want that to be stacked, which is why I

67
00:03:14,770 --> 00:03:17,180
called this the pancake stack, but deconstructed,

68
00:03:17,850 --> 00:03:19,350
because as you increase the size

69
00:03:21,060 --> 00:03:24,320
of the viewport, those items will start spanning into

70
00:03:24,320 --> 00:03:27,280
the same line. So it starts when they're all on

71
00:03:27,280 --> 00:03:29,660
top of each other and then they start to deconstruct as you

72
00:03:29,660 --> 00:03:31,700
increase the size of the viewport.

73
00:03:32,120 --> 00:03:35,330
So the way that we're going to be doing this one is using

74
00:03:35,330 --> 00:03:37,660
the shorthand for flexbox - 'flex: 0 1 ' - is

75
00:03:39,080 --> 00:03:41,500
what we will be using for this look that you're seeing

76
00:03:41,540 --> 00:03:42,920
right now without the stretching.

77
00:03:43,290 --> 00:03:45,920
But if we did want to stretch, we can set that to 'flex: 1

78
00:03:46,340 --> 00:03:47,840
1 '. And the reason

79
00:03:49,340 --> 00:03:52,260
why we do this is is because the flex shorthands stands for

80
00:03:52,260 --> 00:03:53,260
flex-grow, flex-shrink, and then flex-basis.

81
00:03:56,470 --> 00:03:58,930
So again, here we have 'flex: 0 1 150px'.

82
00:03:59,810 --> 00:04:02,400
That is the basis here. So as we increase the size, it

83
00:04:02,730 --> 00:04:05,400
is not going to be growing much.

84
00:04:05,690 --> 00:04:07,400
Also, when we decrease it is going to be staying within

85
00:04:07,570 --> 00:04:08,690
that 150px size.

86
00:04:08,860 --> 00:04:11,530
When we do change that to 1, I'm just going to delete this

87
00:04:11,530 --> 00:04:14,280
line of code here - now we see that this is going to be

88
00:04:14,280 --> 00:04:17,490
stretching. So here you can see that it stretches to fill

89
00:04:17,490 --> 00:04:18,950
the space even as it wraps.

90
00:04:19,200 --> 00:04:22,290
And as I increase it to be even larger of viewport size,

91
00:04:22,500 --> 00:04:24,500
these items are going to be filling that space.

92
00:04:24,750 --> 00:04:27,380
So this is the deconstructive pancake, a really common

93
00:04:27,760 --> 00:04:29,340
technique that we see in marketing sites.

94
00:04:29,630 --> 00:04:31,930
This is usually going to be like an image with some text

95
00:04:31,930 --> 00:04:34,680
about the product and you can write it by using the flex

96
00:04:35,050 --> 00:04:36,060
shorthand.

97
00:04:36,640 --> 00:04:39,890
I like to call this one Sidebar Says and it takes advantage

98
00:04:39,890 --> 00:04:42,650
of that minmax() function for grid layouts.

99
00:04:42,900 --> 00:04:44,190
So that is this line here.

100
00:04:44,270 --> 00:04:47,400
We have grid-template-columns, minmax, and then

101
00:04:47,480 --> 00:04:49,690
min and max value.

102
00:04:50,070 --> 00:04:51,110
That's pretty straightforward with minmax.

103
00:04:51,820 --> 00:04:54,870
But what this is doing is essentially as we're increasing

104
00:04:54,870 --> 00:04:57,740
the size of the viewport, it's going to be taking that 25%

105
00:04:58,290 --> 00:04:59,540
size, that max size.

106
00:04:59,750 --> 00:05:02,790
And as we decrease it, it hits this point where its 150px

107
00:05:04,420 --> 00:05:07,090
and where 25% is smaller than 150px,

108
00:05:07,840 --> 00:05:10,380
so it's going to clamp it at that minimum size.

109
00:05:10,630 --> 00:05:13,300
So it's going to be increasing when it can take up that

110
00:05:13,550 --> 00:05:16,140
viewport space, but if we have content in here that we

111
00:05:16,140 --> 00:05:18,930
don't want squeezed or we want to stop being 25%

112
00:05:19,560 --> 00:05:22,730
and at a minimum be 150px or whatever value

113
00:05:22,730 --> 00:05:25,020
we set here, then that is exactly what minmax()

114
00:05:25,690 --> 00:05:26,860
is doing for us.

115
00:05:27,110 --> 00:05:29,400
And in the grid-template-columns here we are writing

116
00:05:29,690 --> 00:05:32,190
grid-template-columns, minmax, that face value, and

117
00:05:32,780 --> 00:05:35,110
then the relative value, so 25%, and that second

118
00:05:35,860 --> 00:05:38,700
element is getting 1 fr. So if we look at HTML, we have

119
00:05:38,700 --> 00:05:41,540
these two elements, this yellow side bar section, and then

120
00:05:41,540 --> 00:05:43,080
this purple content section.

121
00:05:43,290 --> 00:05:45,920
And they are taking up the units of space that we are

122
00:05:45,920 --> 00:05:48,540
specifying. In this specific case, we actually even set

123
00:05:48,540 --> 00:05:51,170
this to auto, and it would be looking the same because

124
00:05:51,630 --> 00:05:54,300
we are only saying the size to that first elements.

125
00:05:54,630 --> 00:05:57,640
We're gonna go over auto versus 1 fr in the next example,

126
00:05:58,180 --> 00:05:59,640
but I think that this is pretty neat.

127
00:05:59,680 --> 00:06:01,810
A great way to set a minimum size, but then

128
00:06:02,810 --> 00:06:05,850
let your elements stretch on larger viewports to

129
00:06:05,850 --> 00:06:08,520
fit those layouts a little bit better, based on how

130
00:06:09,400 --> 00:06:11,360
your user is seeing your website.

131
00:06:12,150 --> 00:06:14,150
Next, we have the pancake stack.

132
00:06:14,490 --> 00:06:17,450
Unlike the deconstructive pancake, this one does not shift

133
00:06:17,660 --> 00:06:19,910
when the screen changes sizes.

134
00:06:20,200 --> 00:06:23,000
This is a very common layout that we see for both

135
00:06:23,250 --> 00:06:25,750
websites and applications across mobile and desktop

136
00:06:26,540 --> 00:06:29,170
functions. So it looks like this, as we're increasing

137
00:06:29,920 --> 00:06:31,130
and decreasing the size.

138
00:06:31,460 --> 00:06:33,460
This content is not changing.

139
00:06:33,760 --> 00:06:36,550
And what we are doing to create this is we are writing the

140
00:06:36,550 --> 00:06:39,090
grid-template-rows to be auto, 1fr,

141
00:06:40,390 --> 00:06:42,600
and auto. So what we are doing is essentially

142
00:06:43,430 --> 00:06:46,480
telling the first and last row to take up

143
00:06:46,640 --> 00:06:49,480
the space that the internal elements allow.

144
00:06:49,480 --> 00:06:52,320
So if this header was two lines, then it's going to

145
00:06:52,320 --> 00:06:55,150
increasingly take up more space within this

146
00:06:55,320 --> 00:06:56,450
vertical layout.

147
00:06:57,070 --> 00:06:59,490
With this auto section, I could have more content

148
00:07:00,070 --> 00:07:03,120
here, but it's not going to increase the size because

149
00:07:03,120 --> 00:07:06,540
what we're doing is setting the auto placed

150
00:07:06,660 --> 00:07:09,500
row first to take up that specific size based

151
00:07:10,080 --> 00:07:11,250
on the content within it.

152
00:07:11,460 --> 00:07:14,510
And then the remaining space is remaining fractional units.

153
00:07:14,920 --> 00:07:17,720
So as we increase this also vertically, you could

154
00:07:18,050 --> 00:07:21,090
see that the first and last row are not

155
00:07:21,090 --> 00:07:23,890
growing. They're still only gonna be taking the size that

156
00:07:23,890 --> 00:07:26,890
they need, but if I decrease the horizontal space

157
00:07:26,930 --> 00:07:29,850
as footer content moves onto the next line, it is going

158
00:07:29,850 --> 00:07:32,190
to be taking space up within that layout.

159
00:07:32,480 --> 00:07:35,480
So with 'grid-template-rows: auto, 1fr, auto' you can

160
00:07:35,480 --> 00:07:37,690
create the pancake stack. You could even have an

161
00:07:37,740 --> 00:07:39,110
application toolbar down there.

162
00:07:39,660 --> 00:07:42,780
Again, this is one that we see really commonly and

163
00:07:43,120 --> 00:07:44,790
grid-template-rows is a great one to know.

164
00:07:45,490 --> 00:07:48,500
Another very common layout is the Holy Grail layout.

165
00:07:48,540 --> 00:07:50,040
Does this look familiar?

166
00:07:50,460 --> 00:07:53,170
I think we've all seen a website or two that looks exactly

167
00:07:53,170 --> 00:07:55,710
like this at some point on our web journey.

168
00:07:55,920 --> 00:07:58,670
We've got your header, your footer, your

169
00:07:58,920 --> 00:08:01,970
left sidebar over here, your main content and a right

170
00:08:01,970 --> 00:08:04,890
sidebar. And we can write all of this

171
00:08:04,970 --> 00:08:06,890
in one line of code using grid-template.

172
00:08:07,720 --> 00:08:10,770
So grid-template allows us to write the

173
00:08:10,770 --> 00:08:12,730
grid-template-rows and grid-template-columns

174
00:08:14,060 --> 00:08:15,570
at the same time.

175
00:08:15,900 --> 00:08:18,400
So that's pretty neat. It's also super responsive.

176
00:08:18,400 --> 00:08:21,320
Again, you see this auto content taking up

177
00:08:21,450 --> 00:08:24,490
what we are specifying here internally and then

178
00:08:24,490 --> 00:08:26,370
this main content taking up the 1fr.

179
00:08:27,080 --> 00:08:29,410
And so what we are specifying here is grid-template

180
00:08:30,370 --> 00:08:33,500
with auto, 1fr for this middle space,

181
00:08:33,540 --> 00:08:34,840
and then auto for the footer.

182
00:08:35,090 --> 00:08:38,340
And then we've got our columns of auto, 1fr, and auto.

183
00:08:38,670 --> 00:08:41,680
So you get the whole Holy Grail layout with

184
00:08:41,720 --> 00:08:44,050
'grid-template: auto 1fr auto / auto 1fr auto'.

185
00:08:45,050 --> 00:08:47,140
This slash is what denotes our rows versus

186
00:08:48,180 --> 00:08:51,230
columns when we are writing the grid templates.

187
00:08:51,640 --> 00:08:53,850
So I think that this one is great to know.

188
00:08:53,850 --> 00:08:56,320
Grid-template is something that I use all the time.

189
00:08:56,690 --> 00:08:58,530
This is not exactly one line.

190
00:08:58,570 --> 00:09:00,490
I mean, all of these, you know, you have a little bit more

191
00:09:00,490 --> 00:09:03,240
to add. But with this, when you are ready in grid-template,

192
00:09:03,910 --> 00:09:05,820
you can then specify grid-columns

193
00:09:07,030 --> 00:09:08,580
and grid-rows for each of these

194
00:09:10,120 --> 00:09:12,790
elements. So here I am specifying what grid-column I am

195
00:09:12,790 --> 00:09:14,540
placing the header in.

196
00:09:14,580 --> 00:09:16,880
I'm going all the way across all three.

197
00:09:16,880 --> 00:09:19,960
So 1 / 4 to get those grid tracks from

198
00:09:19,960 --> 00:09:21,470
the first track to the last track.

199
00:09:21,840 --> 00:09:24,590
And then the left side, we have it going inside the first,

200
00:09:24,590 --> 00:09:25,890
so from 1 to 2.

201
00:09:26,550 --> 00:09:29,060
This main section going from 2 to 3.

202
00:09:29,770 --> 00:09:31,770
So that's gonna be taking up the middle section and then

203
00:09:31,770 --> 00:09:34,520
the right side is from 3 to 4, so that's going all the way

204
00:09:34,520 --> 00:09:36,980
to the end of this grid that we've created.

205
00:09:37,400 --> 00:09:39,230
And then for that footer, it's going all the way across

206
00:09:39,230 --> 00:09:42,400
just like the header. So you do specify where

207
00:09:42,400 --> 00:09:45,610
items are placed when it is a little more of a complex

208
00:09:45,610 --> 00:09:48,830
UI. And in here, if we look at the HTML, I have

209
00:09:48,950 --> 00:09:52,750
this parent, then I have header, then I have left-sidebar,

210
00:09:53,160 --> 00:09:56,750
then I have the main section, right section

211
00:09:56,920 --> 00:09:58,340
and then the footer.

212
00:09:58,460 --> 00:10:01,460
So you can write all of your layouts in one line

213
00:10:01,510 --> 00:10:03,800
using grid-template property.

214
00:10:04,510 --> 00:10:07,010
Next we have another classic the 12-by or 12-span

215
00:10:07,930 --> 00:10:10,180
grid. You can quickly write grids in CSS using

216
00:10:10,890 --> 00:10:11,890
the repeat() grid function.

217
00:10:12,930 --> 00:10:16,270
And here we're setting a repeat of 12 columns.

218
00:10:16,440 --> 00:10:17,560
So that looks like this grid-template-columns, repeat

219
00:10:19,560 --> 00:10:21,780
- the number that you want to repeat - and then 1fr.

220
00:10:22,480 --> 00:10:24,610
So this would be the same as writing

221
00:10:24,610 --> 00:10:27,240
'grid-template-columns: 1fr 1fr 1fr'

222
00:10:27,740 --> 00:10:30,580
twelve times, but because I don't want to do that, I'm just

223
00:10:30,580 --> 00:10:33,700
going to write repeat, 12, and then 1fr and then

224
00:10:33,750 --> 00:10:35,790
we have a 12-by grid.

225
00:10:36,160 --> 00:10:39,210
So now we can place our items within this grid

226
00:10:39,420 --> 00:10:42,130
however we want. If we want it to span all the way across

227
00:10:42,130 --> 00:10:44,760
the 12 columns, we would use this span 12

228
00:10:45,420 --> 00:10:48,220
element. I just gave it a span12 class and have it going

229
00:10:48,220 --> 00:10:51,560
from 1 all the way to 13, so taking up the full space

230
00:10:51,720 --> 00:10:54,100
of the 12 columns ending at the grid track of 13,

231
00:10:54,980 --> 00:10:58,190
which would be the end of that 12th column line.

232
00:10:58,350 --> 00:11:01,440
For the span6, this is going from one to seven.

233
00:11:01,730 --> 00:11:03,900
For span4 this is going from 4 to 8.

234
00:11:04,360 --> 00:11:07,610
It can go anywhere. I could start this at the first line

235
00:11:07,650 --> 00:11:08,660
and make it go all the way to 9.

236
00:11:09,030 --> 00:11:11,160
I could have this go to 5 and have it still span 4.

237
00:11:11,530 --> 00:11:14,160
But the cool thing is you can just place this wherever you

238
00:11:14,160 --> 00:11:15,870
want inside of your UI.

239
00:11:15,950 --> 00:11:18,460
So if I want to have this start from 6 and go to 10,

240
00:11:19,000 --> 00:11:21,670
I could do that. And then we have this span2, and this

241
00:11:22,000 --> 00:11:24,300
is just going from 3 to 5. Again, that could be placed

242
00:11:24,340 --> 00:11:26,840
anywhere. And then a peep at the HTML, we just have

243
00:11:27,380 --> 00:11:30,340
this parent element, and then the inside of

244
00:11:30,340 --> 00:11:32,640
here, we're just giving classes based on those span

245
00:11:32,930 --> 00:11:35,520
elements that we were just adjusting within that grid

246
00:11:35,890 --> 00:11:38,940
template. So the repeat function is very,

247
00:11:38,940 --> 00:11:41,440
very useful when you don't want to keep typing out

248
00:11:42,060 --> 00:11:43,690
1fr auto multiple times.

249
00:11:43,940 --> 00:11:46,570
It just lets you quickly write information.

250
00:11:47,150 --> 00:11:50,240
We're going to expand on the repeat function for number

251
00:11:50,240 --> 00:11:52,320
7. And this technique is super cool, super

252
00:11:53,330 --> 00:11:55,910
useful. If you take away anything from this video, I think

253
00:11:55,910 --> 00:11:58,250
this would be a great one to keep in your repertoire.

254
00:11:58,580 --> 00:12:01,250
I like to call this the RAM technique, which stands for

255
00:12:01,500 --> 00:12:03,750
repeat, auto, and minmax, and the line of code

256
00:12:04,670 --> 00:12:06,050
here, it looks like this. You have the

257
00:12:06,050 --> 00:12:08,630
grid-template-columns, repeat, auto-fit, or

258
00:12:09,470 --> 00:12:12,680
autofill, minmax, the base value, and then

259
00:12:13,550 --> 00:12:15,010
1fr for a fractional unit.

260
00:12:15,350 --> 00:12:17,430
And here we have that base value as 150px.

261
00:12:18,270 --> 00:12:19,640
I'll show you exactly what's going on.

262
00:12:19,940 --> 00:12:22,900
So as we increase the size here, these

263
00:12:22,900 --> 00:12:25,480
elements are going to fit to take up the space, these

264
00:12:26,270 --> 00:12:29,190
four boxes. As I decrease it, they're going to hit

265
00:12:29,530 --> 00:12:32,530
this 150px base value and then

266
00:12:32,610 --> 00:12:34,870
they're going to wrap onto the next line.

267
00:12:35,120 --> 00:12:36,990
But here we have them auto-fitting, so

268
00:12:38,160 --> 00:12:41,330
they're going to be spanning the take up as much space

269
00:12:41,370 --> 00:12:43,880
as they can. There's some really cool algorithms at

270
00:12:44,420 --> 00:12:47,550
play here. Now, if we change this to

271
00:12:47,590 --> 00:12:50,170
auto-fill, this will look a little bit different.

272
00:12:50,170 --> 00:12:53,090
So let me just update that to auto-fill. Here, now,

273
00:12:53,140 --> 00:12:55,140
as I increase the size, it's not going to

274
00:12:56,140 --> 00:12:58,640
be spanning and stretching to take up the remainder

275
00:12:59,140 --> 00:13:01,730
of the space, it's actually going to be using that 150

276
00:13:01,810 --> 00:13:04,020
pixels as a baseline and stay within that.

277
00:13:04,440 --> 00:13:06,440
At smaller sizes, there's no difference here.

278
00:13:06,690 --> 00:13:09,860
But you really see the difference at larger sizes as

279
00:13:09,860 --> 00:13:11,700
you have additional space.

280
00:13:11,950 --> 00:13:15,200
And I use this technique on the page that you're looking

281
00:13:15,240 --> 00:13:17,580
at here itself, this auto-fill, so

282
00:13:18,660 --> 00:13:20,660
that these two segments would stretch and

283
00:13:21,620 --> 00:13:25,170
shrink, but not exceed a specific

284
00:13:25,170 --> 00:13:26,460
space that I wanted them to.

285
00:13:26,460 --> 00:13:29,550
And then I have them centered, so you can center this

286
00:13:29,670 --> 00:13:32,880
within the parent as it spreads to a larger size.

287
00:13:32,880 --> 00:13:35,590
That's always an option and a really great technique to

288
00:13:35,720 --> 00:13:38,180
know. Remember R-A-M,

289
00:13:38,850 --> 00:13:41,220
repeat, auto, fill or fit, and then minmax,

290
00:13:41,930 --> 00:13:44,440
and you can get these responsive boxes.

291
00:13:44,600 --> 00:13:46,730
You can use these for images, you can use them for a lot of

292
00:13:46,730 --> 00:13:49,820
things. It's something that we see all the time for cards.

293
00:13:50,320 --> 00:13:53,530
And this is a great use of all of these fancy new

294
00:13:53,740 --> 00:13:54,950
grid capabilities in CSS.

295
00:13:55,450 --> 00:13:57,320
For our next layout, we're heading back

296
00:13:58,450 --> 00:13:59,780
to flexbox land.

297
00:14:00,080 --> 00:14:02,620
I want to include this one because I just find it so useful

298
00:14:02,620 --> 00:14:04,120
and I use this all the time.

299
00:14:04,410 --> 00:14:06,250
I call it the Line Up. Why?

300
00:14:06,460 --> 00:14:08,000
I don't know. I'm tired.

301
00:14:08,170 --> 00:14:09,840
If you have a better name, please let me know.

302
00:14:09,880 --> 00:14:11,840
Leave a comment. But the main thing that I wanted to

303
00:14:11,840 --> 00:14:13,630
demonstrate here is justify-content

304
00:14:15,010 --> 00:14:17,680
for placement of items. And here specifically, I wanted to

305
00:14:17,720 --> 00:14:20,430
highlight 'justify-content: space-between' to place

306
00:14:20,680 --> 00:14:21,970
items at their edges.

307
00:14:22,180 --> 00:14:24,850
And so in this example, we have these three cards

308
00:14:25,140 --> 00:14:27,600
and you can see that as I'm stretching or shrinking

309
00:14:28,190 --> 00:14:30,110
the size of this viewport element, they

310
00:14:31,230 --> 00:14:33,740
are maintaining the same height as each other.

311
00:14:34,030 --> 00:14:36,860
And in fact, we are having them

312
00:14:37,070 --> 00:14:40,450
fit to the top and bottom and this interior

313
00:14:40,450 --> 00:14:43,500
content - so this description like, I can keep

314
00:14:43,620 --> 00:14:46,920
typing here - this is then going to be centered

315
00:14:47,080 --> 00:14:49,170
within the remaining space.

316
00:14:49,460 --> 00:14:52,920
And so the reason this is happening is because

317
00:14:53,090 --> 00:14:55,920
for these cards, we're giving them this flex-direction

318
00:14:56,630 --> 00:14:59,470
of 'column'. This display-flex, the flexbox mode,

319
00:14:59,720 --> 00:15:01,890
and then we're justifying content space-between.

320
00:15:02,850 --> 00:15:05,390
So because this is a column for the flex-direction,

321
00:15:06,560 --> 00:15:09,560
the space-between is going to be right here in between

322
00:15:09,810 --> 00:15:12,400
these three elements; this little box here, the

323
00:15:12,400 --> 00:15:13,480
description, and the title.

324
00:15:13,940 --> 00:15:17,280
And so here, as I'm having additional space

325
00:15:17,360 --> 00:15:20,530
added or removed vertically, they are centering themselves.

326
00:15:20,570 --> 00:15:23,830
And this just makes for a much neater layout.

327
00:15:23,870 --> 00:15:26,660
I've used this a lot here, without that justification, it

328
00:15:26,660 --> 00:15:27,960
looks a lot more messy.

329
00:15:28,160 --> 00:15:30,290
But because of the stretching here, because of the flexbox,

330
00:15:30,630 --> 00:15:33,040
because of this 'justify-content: space between', I use

331
00:15:33,040 --> 00:15:35,920
this all the time and I think it's really important to know

332
00:15:36,090 --> 00:15:39,180
that with flexbox you can change the direction

333
00:15:39,260 --> 00:15:41,680
and you can justify your content in unique ways.

334
00:15:41,680 --> 00:15:43,430
It doesn't have to be just centered.

335
00:15:43,680 --> 00:15:46,850
You can also do center, you can do a space-around

336
00:15:47,730 --> 00:15:48,730
as well or space-evenly.

337
00:15:49,520 --> 00:15:52,270
But in this case, I think that the best way to justify is

338
00:15:52,610 --> 00:15:55,860
space-between. Because this way we are ensuring

339
00:15:56,110 --> 00:15:59,150
that the first and last element here

340
00:15:59,530 --> 00:16:02,530
in our layout, which is going to be this H3 and this whole

341
00:16:02,570 --> 00:16:05,620
visual box, remain flush

342
00:16:05,620 --> 00:16:07,660
to the top and bottom of our cards.

343
00:16:08,620 --> 00:16:11,250
Here's where we get into some techniques with a little less

344
00:16:11,290 --> 00:16:12,670
current browser support.

345
00:16:13,000 --> 00:16:16,090
I like to call this one Clamping My Syle and it's a really

346
00:16:16,090 --> 00:16:19,130
neat trick. Remember at the beginning of this video,

347
00:16:19,130 --> 00:16:21,010
we talked about min, max and clamp?

348
00:16:21,550 --> 00:16:24,600
Well, here's where it can come into play for layout and

349
00:16:24,640 --> 00:16:27,600
element style. Here I'm specifying the width

350
00:16:27,850 --> 00:16:30,440
using this clamp function and I'm setting clamp to 23ch,

351
00:16:30,440 --> 00:16:31,440
50%, and 46ch. What

352
00:16:35,190 --> 00:16:37,570
does this do? Let me show you exactly what's going on here.

353
00:16:37,940 --> 00:16:41,030
As I increase the size of this element, the

354
00:16:41,030 --> 00:16:43,280
parent container here, it is going to increase

355
00:16:44,410 --> 00:16:45,950
the size of this card.

356
00:16:46,200 --> 00:16:48,330
And as I decrease it, it decreases it.

357
00:16:48,660 --> 00:16:52,170
But what we are setting here is a minimum and maximum size

358
00:16:52,420 --> 00:16:54,250
for it to clamp to as it reaches that

359
00:16:55,460 --> 00:16:57,170
50% size.

360
00:16:57,420 --> 00:17:00,050
This card wants to be at 50% width, but

361
00:17:00,630 --> 00:17:03,130
if that 50% means that it's bigger than 46ch -

362
00:17:04,140 --> 00:17:07,310
which stands for 46 characters - then

363
00:17:07,350 --> 00:17:09,600
it's going to stop getting bigger.

364
00:17:09,890 --> 00:17:12,600
The same thing happens with the smaller viewport size.

365
00:17:12,810 --> 00:17:15,730
It's going to stop decreasing in size when 50%

366
00:17:16,940 --> 00:17:19,860
of its parent size means that it is smaller than 23ch

367
00:17:19,900 --> 00:17:22,400
- which is 23 characters.

368
00:17:22,820 --> 00:17:25,450
And these specific character units can be used to make

369
00:17:25,950 --> 00:17:27,870
legibility a little bit easier.

370
00:17:28,160 --> 00:17:30,620
So in this case, I don't want this card to get any smaller

371
00:17:30,910 --> 00:17:33,160
than that because then the paragraph gets harder to read.

372
00:17:33,460 --> 00:17:36,170
And same thing with getting bigger than 46 characters, then

373
00:17:36,710 --> 00:17:38,500
it gets too long and hard to read.

374
00:17:38,800 --> 00:17:42,050
So you can use width, clamp, minimum size,

375
00:17:42,050 --> 00:17:45,260
the actual size, and the max size to create

376
00:17:45,260 --> 00:17:48,720
some really cool responsiveness within this element itself.

377
00:17:49,100 --> 00:17:51,060
And you can also use clamp() for font size.

378
00:17:51,100 --> 00:17:52,890
That's a really great use case, too.

379
00:17:53,140 --> 00:17:55,230
You can have this responsive, flexible typography.

380
00:17:55,230 --> 00:17:56,770
You could have like clamp, 1.5rem,

381
00:17:59,520 --> 00:18:02,240
and then like say,

382
00:18:02,530 --> 00:18:05,160
10vw for the viewport width, and then 3rem

383
00:18:06,320 --> 00:18:07,450
as the biggest size.

384
00:18:07,700 --> 00:18:10,740
And that way, as you resize your window, you're

385
00:18:10,740 --> 00:18:13,750
going to be having a minimum value of

386
00:18:14,290 --> 00:18:17,170
1.5rem, maximum value of 3rem, and then

387
00:18:17,290 --> 00:18:20,250
you're gonna have that grow and shrink into that remaining

388
00:18:20,250 --> 00:18:23,380
space. So it's pretty cool to see this

389
00:18:23,420 --> 00:18:25,760
actually working in a browser.

390
00:18:25,930 --> 00:18:28,430
Again, this doesn't have a full browser support,

391
00:18:28,930 --> 00:18:31,310
but it is a really great technique.

392
00:18:31,390 --> 00:18:34,060
So if you're using this, make sure the fallbacks and do

393
00:18:34,060 --> 00:18:35,060
your browser testing.

394
00:18:35,810 --> 00:18:38,860
And finally, we are at the end and this is the last

395
00:18:38,860 --> 00:18:41,690
layout tool. And this layout tool is the most experimental

396
00:18:42,150 --> 00:18:44,490
of the bunch. This is recently introduced to Chrome Canary

397
00:18:45,110 --> 00:18:46,240
and Chrome 84+.

398
00:18:46,910 --> 00:18:49,700
And there is an active effort from Firefox in getting this

399
00:18:49,740 --> 00:18:52,370
implemented in browser, but it is currently not in any

400
00:18:52,620 --> 00:18:55,500
stable browsers - at the time of this recording.

401
00:18:55,780 --> 00:18:57,620
I do want to mention it though, because it is such a

402
00:18:57,620 --> 00:19:00,300
frequently met problem and it's just simply maintaining

403
00:19:01,090 --> 00:19:03,130
the aspect ratio of an image or a video or

404
00:19:04,050 --> 00:19:05,050
of an iframe.

405
00:19:05,470 --> 00:19:08,430
And so what this is, is respecting

406
00:19:08,510 --> 00:19:10,010
the aspect, Respect for Aspect.

407
00:19:10,300 --> 00:19:12,640
That's name I gave it. And it is the aspect-ratio

408
00:19:13,520 --> 00:19:16,390
property. Oh, my gosh, I'm going to be so excited when this

409
00:19:16,640 --> 00:19:18,060
is implemented in all browsers.

410
00:19:18,730 --> 00:19:22,070
What this is doing is, as I am resizing this

411
00:19:22,070 --> 00:19:24,980
parent element, the image here

412
00:19:25,070 --> 00:19:27,610
- so this is just like I gave it a class of visual for this

413
00:19:27,610 --> 00:19:29,990
box here. That is right here.

414
00:19:30,490 --> 00:19:33,740
- this is getting an aspect ratio of 16 to 9.

415
00:19:34,040 --> 00:19:36,960
And no matter how I increase it or decrease it, it is going

416
00:19:37,210 --> 00:19:38,790
to keep that aspect ratio.

417
00:19:39,000 --> 00:19:41,330
This is something that is so needed for when you

418
00:19:42,000 --> 00:19:45,460
are pulling in content from a CMS or otherwise,

419
00:19:45,630 --> 00:19:48,510
and you have a specific dimension that you have that

420
00:19:48,970 --> 00:19:49,970
media at.

421
00:19:50,510 --> 00:19:53,470
And this, for example, in the previous example, if I

422
00:19:53,470 --> 00:19:56,520
scroll up as I resize here, since I'm only

423
00:19:56,520 --> 00:19:59,310
setting a height and it's just getting the 100%

424
00:19:59,730 --> 00:20:02,940
width of whatever remaining space that I'm providing here,

425
00:20:03,440 --> 00:20:06,070
it's actually changing the aspect ratio of the sole visual

426
00:20:06,070 --> 00:20:07,900
box. And that's not what we want.

427
00:20:08,650 --> 00:20:11,660
That is going to make you force a decision on

428
00:20:11,700 --> 00:20:14,450
if you want to either fit the content inside of there so

429
00:20:14,700 --> 00:20:16,910
it's smaller and fits within the space, or if

430
00:20:17,750 --> 00:20:20,250
you stretch it out and you have it fill the content

431
00:20:20,870 --> 00:20:23,210
and then you're only seeing a piece of that media and not

432
00:20:23,210 --> 00:20:26,130
the full image - and that's also going to cause all sorts

433
00:20:26,170 --> 00:20:29,380
of problems. So having this aspect ratio is

434
00:20:29,470 --> 00:20:31,590
very exciting.

435
00:20:31,800 --> 00:20:34,550
You can also set this to a square if you do 1 over 1.

436
00:20:35,310 --> 00:20:38,220
You could have this be 1 over 2, where you have this

437
00:20:38,220 --> 00:20:41,520
actually longer than it is wide within this parent

438
00:20:41,520 --> 00:20:44,150
here. So that's going to be maintaining that aspect ratio.

439
00:20:44,400 --> 00:20:46,650
And it's just exciting, so I wanted to mention it and let

440
00:20:46,650 --> 00:20:48,360
you know that it's coming down the pipeline.

441
00:20:49,530 --> 00:20:52,490
And those are the 10 really powerful lines of CSS that

442
00:20:52,490 --> 00:20:53,570
I wanted to talk about in this 1 line layout video.

443
00:20:55,830 --> 00:20:57,410
I hope that you all learned something new.

444
00:20:57,450 --> 00:20:59,500
And if you're looking for these demos, check out

445
00:21:01,910 --> 00:21:03,880
1linelayouts.glitch.me. Thank you all for watching.

446
00:21:03,920 --> 00:21:07,090
If you want more CSS content and to dive deeper into layout

447
00:21:07,130 --> 00:21:09,800
techniques, including all the bells and whistles of CSS

448
00:21:10,090 --> 00:21:13,220
grid and flexbox, check out the CSS podcast

449
00:21:13,260 --> 00:21:15,800
that I do with my co-host, Adam Argyle.

450
00:21:16,100 --> 00:21:18,720
It is at pod.link/thecsspodcast.

