1
00:00:13,280 --> 00:00:15,160
If you are building website today

2
00:00:15,160 --> 00:00:18,460
chances are, you are using some sort of build tools

3
00:00:18,460 --> 00:00:23,120
[Mariko]  all right so one question
when you are starting a new project or

4
00:00:23,120 --> 00:00:28,540
you are giving brand new repo and then
like, "Hey Surma, please start this project"

5
00:00:28,540 --> 00:00:31,200
where do you start
what tools do you choose like tell me

6
00:00:31,210 --> 00:00:33,660
about your, like, setup.

7
00:00:33,660 --> 00:00:37,040
[Surma] ah, this has evolved
so much over time

8
00:00:37,040 --> 00:00:39,620
[Jason] I I take a long time to decide

9
00:00:39,620 --> 00:00:41,620
and I usually start out without a bundler

10
00:00:41,620 --> 00:00:43,800
[Adam] my preferred starting place is

11
00:00:43,800 --> 00:00:48,180
I just want to write latest JS
latest CSS and the rest of it is out

12
00:00:48,180 --> 00:00:50,120
of my way until I'm gonna solve it.

13
00:00:50,120 --> 00:00:52,980
It really depends on what the project is

14
00:00:52,980 --> 00:00:59,560
I've been building a lot of static sites
lately and 11ty is a recently I guess a

15
00:00:59,579 --> 00:01:03,000
relatively new tool for static site
generation and I've been converting some

16
00:01:03,000 --> 00:01:09,780
Jekyll sites into that and it's just
felt so nice and not super robust which

17
00:01:09,780 --> 00:01:12,840
is what you sort of need for a static
site,  but then if I am building a more

18
00:01:12,840 --> 00:01:17,759
dynamic project I'll either go with like
NextJS or Gatsby if I want like react

19
00:01:17,759 --> 00:01:21,570
with a static site because they like how
it parses out to just HTML CSS and

20
00:01:21,570 --> 00:01:26,080
JavaScript but there's a thousand tools
and it really just depends

21
00:01:26,080 --> 00:01:27,660
that's the answer it depends

22
00:01:27,660 --> 00:01:31,040
So I was a webpack
user and I use webpack because at the

23
00:01:31,040 --> 00:01:34,180
time it was the only one that supported 
code splitting

24
00:01:34,180 --> 00:01:37,840
because like I knew I just needed to add this tag in the head

25
00:01:37,840 --> 00:01:44,080
but like the HTML plug-in had went 
no this is mine now you may not touch

26
00:01:44,080 --> 00:01:46,740
and then other things like 
in the earlier days of Service Worker

27
00:01:46,740 --> 00:01:49,680
I wanted to... I just wanted like a list of the output files

28
00:01:49,680 --> 00:01:52,920
I want like you know let me know what the
the hash is going to be for these files

29
00:01:52,920 --> 00:01:58,020
but reading the webpack plug-in Docs
I just, I was getting so frustrated

30
00:01:58,020 --> 00:01:59,080
I couldn't figure it out

31
00:01:59,080 --> 00:02:02,120
I used to use gulp or Grunt a lot

32
00:02:02,120 --> 00:02:06,360
because at least I understood what's
happening and then with webpack

33
00:02:06,360 --> 00:02:09,360
I really didn't understand what's happening

34
00:02:09,360 --> 00:02:12,480
Now over time I have kind of

35
00:02:12,480 --> 00:02:14,400
fallen in love with Rollup

36
00:02:14,400 --> 00:02:17,660
So I have my own build system
that I've been managing

37
00:02:17,660 --> 00:02:21,040
it's probably my sixth build system I've made

38
00:02:21,040 --> 00:02:22,500
if you go look at my Github history, I have

39
00:02:22,520 --> 00:02:25,900
a Grunt one, I have a Make one, I have gulp one

40
00:02:25,900 --> 00:02:28,760
I I've been following all these build tools for
a long time

41
00:02:28,760 --> 00:02:32,260
Here's how I feel about Web projects is complexity is inevitable

42
00:02:32,260 --> 00:02:34,180
There's no way to get around it and

43
00:02:34,180 --> 00:02:37,630
you're either injecting complexity from
the beginning and making it worse

44
00:02:37,630 --> 00:02:40,780
or you're waiting until you're
complexity confronts you.

45
00:02:41,300 --> 00:02:46,140
[Marko] Yes even if you start simple complexity is inevitable

46
00:02:46,140 --> 00:02:50,000
Idea of making website in principle is straightforward

47
00:02:50,000 --> 00:02:53,980
You make HTML document
add style to it

48
00:02:53,980 --> 00:02:56,700
and add some functionality to it too

49
00:02:56,700 --> 00:03:00,760
but in practice
web development gets a lot more complex

50
00:03:00,760 --> 00:03:05,220
Your application code may depend on
outside libraries or different modules

51
00:03:05,230 --> 00:03:08,100
you might be importing web fonts

52
00:03:08,100 --> 00:03:10,450
or you might be pre-rendering a portion of a

53
00:03:10,450 --> 00:03:14,590
page as a static site so that it can get
delivered faster to the users

54
00:03:14,590 --> 00:03:20,480
and chances are you're probably using build tools to manage all of these complexities

55
00:03:20,480 --> 00:03:25,240
but because tools expects
certain set up sometimes seemingly

56
00:03:25,240 --> 00:03:31,450
simple tasks like add a line to HTML
gets harder to accomplish there are many

57
00:03:31,450 --> 00:03:36,300
challenges like this in web development
so let's look at how we manage JavaScript

58
00:03:36,300 --> 00:03:40,660
In the past we've written
everything in independent file or

59
00:03:40,660 --> 00:03:47,040
different script tags and carefully
combine them or add it to HTML by ourselves

60
00:03:47,040 --> 00:03:51,240
The way we write JavaScript we
used to like have this like massive file

61
00:03:51,240 --> 00:03:56,360
the humans needed to know which one goes
first and which one goes after

62
00:03:56,360 --> 00:04:00,580
Yeah and even like you're you're making me
remember where I started with bundling

63
00:04:00,580 --> 00:04:04,990
which was a PHP script that concatenated
all my JavaScript files together which

64
00:04:04,990 --> 00:04:08,960
now feels wrong but at the time felt
very powerful

65
00:04:08,960 --> 00:04:11,360
[Mariko] but now we have modules

66
00:04:11,360 --> 00:04:16,720
which means dependency of each modules
are specified in the code which means a

67
00:04:16,720 --> 00:04:21,860
build tool can analyze a file and create
bundle for us

68
00:04:21,860 --> 00:04:24,720
even better, some tool like webpack

69
00:04:24,720 --> 00:04:28,280
analyze which part of the code
is actually being used

70
00:04:28,280 --> 00:04:31,800
and extracted it to make smaller
bundles

71
00:04:31,800 --> 00:04:34,160
[Mariko] when we started writing JavaScript this way

72
00:04:34,160 --> 00:04:37,700
I feel like webpack
came in the scene as a tool of choice

73
00:04:37,700 --> 00:04:43,440
with you know things that has a lot of bells and whistles and do things

74
00:04:43,440 --> 00:04:48,419
like tree shaking and scope hosting so
could you explain how webpack handles

75
00:04:48,419 --> 00:04:50,740
this module javascript field

76
00:04:50,740 --> 00:04:56,120
[Jason] Yeah so webpack supports like a huge number of module formats

77
00:04:56,120 --> 00:05:02,600
like some of the common ones obviously ES modules,  CommonJS, everybody knows about

78
00:05:02,600 --> 00:05:05,720
but it actually
supports parsing and understanding the

79
00:05:05,730 --> 00:05:13,890
structure of SystemJS modules and AMD
modules and even Wasm imports and so

80
00:05:13,890 --> 00:05:19,110
it takes all that information and in its
in-memory graph representation

81
00:05:19,110 --> 00:05:24,690
it attaches that and can use it to you know
if you only imported one thing from a

82
00:05:24,690 --> 00:05:30,180
module it can essentially delete the
export from that module that you didn't

83
00:05:30,180 --> 00:05:35,280
use and that way that code path won't
end up in your bundle and when you take

84
00:05:35,280 --> 00:05:39,930
that your fragment it out you know maybe
that export was using another import

85
00:05:39,930 --> 00:05:44,370
from another module and now that's
unused you can see how flowing that

86
00:05:44,370 --> 00:05:48,980
information through the graph eventually
you could end up removing a fair bit of code

87
00:05:48,980 --> 00:05:54,780
So webpack doesn't actually convert
modules to an internal source format it

88
00:05:54,780 --> 00:06:00,360
is more focused on understanding them
and their structure as they exist on disk

89
00:06:00,360 --> 00:06:05,280
[Mariko] Our JavaScript file does not have
to be a single file so tools like Rollup

90
00:06:05,280 --> 00:06:08,680
will split them up into smaller
chunks

91
00:06:08,680 --> 00:06:12,500
Can you explain why Rollup is really good at it?

92
00:06:12,500 --> 00:06:19,080
[Jake] Yeah so webpack has its own loader and so does Parcel

93
00:06:19,080 --> 00:06:23,280
whereas Rollup by default is ECMAScript modules

94
00:06:23,280 --> 00:06:26,000
like that's where it lives it lives in that world so the

95
00:06:26,010 --> 00:06:29,300
output it generates is like way simpler
than the other tools

96
00:06:29,300 --> 00:06:32,760
in terms of code splitting Rollup's implementation is very

97
00:06:32,760 --> 00:06:35,560
pure, I would say

98
00:06:35,560 --> 00:06:40,380
It will create the smallest number of chunks that it can

99
00:06:40,380 --> 00:06:44,640
but it will create a small chunk

100
00:06:44,640 --> 00:06:46,360
like maybe your chunk just containing one function

101
00:06:46,360 --> 00:06:48,560
if that's the only bit shared by two
entry points

102
00:06:48,560 --> 00:06:52,860
and that's something that webpack and Parcel don't do

103
00:06:52,860 --> 00:06:56,760
They will duplicate that module in both of their bundles

104
00:06:56,760 --> 00:07:00,840
whereas Rollup will always just create a separate chunk

105
00:07:00,840 --> 00:07:03,100
it's very pure it'll never duplicate code

106
00:07:03,100 --> 00:07:06,500
[Mariko] and different script runs in different thread

107
00:07:06,500 --> 00:07:10,820
ideally common dependencies are exported as one chunk

108
00:07:10,820 --> 00:07:15,220
but some tools doesn't understand it so it creates duplicate

109
00:07:15,220 --> 00:07:18,620
[Mariko] What was interesting to me was that the Parcel supports

110
00:07:18,620 --> 00:07:24,540
worker and main thread splitting out of the box
Is there any backstory for that

111
00:07:24,540 --> 00:07:30,480
[Surma] There is and I think I can take a little, tiny bit of credit for Parcel supporting that

112
00:07:30,480 --> 00:07:34,080
because it was I think like February 2018

113
00:07:34,080 --> 00:07:39,340
you me and some others were working
on Squoosh and Squoosh made heavy use of

114
00:07:39,340 --> 00:07:43,120
WebAssembly and put the WebAssembly in
the Web Worker and then

115
00:07:43,120 --> 00:07:45,220
use Comlink to use those Web Workers

116
00:07:45,220 --> 00:07:49,200
and we built Squoosh using webpack 
and we figured out over time

117
00:07:49,200 --> 00:07:53,660
but actually the way webpack
built that project

118
00:07:53,660 --> 00:07:57,860
it put a copy of Comlink into the worker 
and into the main thread

119
00:07:57,860 --> 00:08:00,600
so the user ended up loading that code twice

120
00:08:00,600 --> 00:08:04,400
now comm leak isn't that big
so it's not that big of a deal but with

121
00:08:04,410 --> 00:08:09,260
bigger dependencies that could actually
become a significant problem and so I

122
00:08:09,260 --> 00:08:14,880
filed a fairly long bug on webpack like
with a graph and everything explaining

123
00:08:14,880 --> 00:08:19,560
why that should change and it hasn't
been fixed yet but it's been discussed a

124
00:08:19,560 --> 00:08:22,919
lot and I think Sean Larkin told me that
webpack 5 will finally be able to

125
00:08:22,920 --> 00:08:27,480
address a problem but shortly after I
opened that bug on webpack

126
00:08:27,480 --> 00:08:29,900
Devon Govett who is the maintainer of Parcel

127
00:08:29,900 --> 00:08:34,420
actually opened an issue himself on Parcel for himself

128
00:08:34,420 --> 00:08:38,880
saying "I think we can do this I
think Parcel can fix this problem" and so

129
00:08:38,880 --> 00:08:42,400
I don't know how long it took him but I
guess a couple months later the bug was closed

130
00:08:42,400 --> 00:08:47,000
and suddenly Parcel now supported this 
code splitting across worker boundaries

131
00:08:47,000 --> 00:08:49,940
and that was just really really cool to see

132
00:08:49,940 --> 00:08:55,020
[Mariko] Beyond making JavaScript bundles 
build tools help us manage assets too

133
00:08:55,020 --> 00:08:59,020
sometimes separately and sometimes
through JavaScript

134
00:08:59,020 --> 00:09:03,460
So I think that as CSS has evolved 
the tooling around it has grown as well

135
00:09:03,560 --> 00:09:07,620
and I think the first like really big instance of CSS tooling

136
00:09:07,620 --> 00:09:12,300
came about with Sass, Less and Stylus 
and all of those preprocessor tools

137
00:09:12,300 --> 00:09:14,130
That was when Ruby was like really big

138
00:09:14,130 --> 00:09:17,520
and they were written in Ruby and was
sort of clunky and slow because then you

139
00:09:17,520 --> 00:09:21,500
had to wait for your CSS to process
before it was spit out

140
00:09:21,500 --> 00:09:24,420
from Sass to CSS for example

141
00:09:24,420 --> 00:09:28,560
and then Node came around and that 
became a lot faster and Sass was rewritten

142
00:09:28,560 --> 00:09:32,420
and people were still using a lot of 
the benefits from that language

143
00:09:32,420 --> 00:09:37,920
the Sass language and then 
PostCSS sort of replaced a lot of that need

144
00:09:37,920 --> 00:09:41,160
because it allowed for you to do some of 
these same things but instead of

145
00:09:41,160 --> 00:09:46,840
pre-processing and waiting for the
developer to see their CSS file be exported

146
00:09:46,840 --> 00:09:50,460
you could then run through the
CSS file after you had already written it

147
00:09:50,460 --> 00:09:54,880
and then apply transformations and
changes with PostCSS and

148
00:09:54,880 --> 00:10:02,070
that also enabled you to have pluggable very small
bits of code that was way less robust

149
00:10:02,070 --> 00:10:09,510
and just large in terms of developer
fingerprint in your dev files in your

150
00:10:09,510 --> 00:10:15,000
architecture by enabling like these
small plugins like a autoprefixer plugin

151
00:10:15,000 --> 00:10:19,200
or something like for size where if you
wanted to use a size keyword you could

152
00:10:19,200 --> 00:10:21,750
use that you could even write your own
so that was really cool

153
00:10:21,750 --> 00:10:25,140
and I think that that has continued to
the state people use PostCSS all the

154
00:10:25,140 --> 00:10:29,640
time and now you're seeing a lot of
additional CSS tools that allow for

155
00:10:29,640 --> 00:10:33,420
things like tree shaking and some of
these optimizations that are beyond just

156
00:10:33,420 --> 00:10:38,940
minification and that is really
coincided with the switch to framework

157
00:10:38,940 --> 00:10:45,360
based JavaScript as being so prevalent
in the way we architect our projects now

158
00:10:45,360 --> 00:10:50,700
You know naturally I think CSS in JS
happens or maybe it's JS in your CSS

159
00:10:50,700 --> 00:10:56,460
but it's sort of like inevitably what
will happen is you'll find a moment

160
00:10:56,460 --> 00:11:00,120
where you needed something that was just
so richly dynamic that some you know

161
00:11:00,120 --> 00:11:05,220
declarative static styles might not work
for so I've been putting you know CSS in

162
00:11:05,220 --> 00:11:09,040
my JS for a long time but if we're
talking about the new CSS in JS libraries

163
00:11:09,040 --> 00:11:11,080
sort of take your object notation or let

164
00:11:11,089 --> 00:11:15,050
you do extending and abstracting in
different ways at the client side

165
00:11:15,050 --> 00:11:19,820
those are great too they all all options
for writing styles still have foot guns

166
00:11:19,820 --> 00:11:23,760
so you just need to be careful and you'll 
learn your tool the more you use it

167
00:11:23,760 --> 00:11:28,020
[Mariko] okay so what's the quarks when
dealing with assets

168
00:11:28,020 --> 00:11:29,400
Yeah, so...

169
00:11:29,400 --> 00:11:35,140
I mean webpack has like a super long history
with various techniques for doing this

170
00:11:35,140 --> 00:11:41,750
at its simplest there are tools for
essentially you can take a loader which

171
00:11:41,750 --> 00:11:46,070
is a transform you apply to a module and
you can apply that to something that

172
00:11:46,070 --> 00:11:51,560
isn't JavaScript to turn it into a
string in a JavaScript file

173
00:11:51,560 --> 00:11:56,779
and so like historically the way that assets have
worked in in webpack has tended to

174
00:11:56,779 --> 00:12:01,670
center around turning them into a
JavaScript thing even for assets where

175
00:12:01,670 --> 00:12:06,380
the asset itself might have dependencies
either on JavaScript or on other assets

176
00:12:06,380 --> 00:12:10,730
it will turn that into a JavaScript
module with a string and turn the

177
00:12:10,730 --> 00:12:17,900
dependencies, you know the CSS import
statements, into JavaScript require calls

178
00:12:17,900 --> 00:12:21,770
and so it will sort of inject them
into the graph by converting them to the

179
00:12:21,770 --> 00:12:23,340
equivalent JavaScript code

180
00:12:23,340 --> 00:12:27,200
[Mariko] Now this is changing in webpack 5 but for other

181
00:12:27,200 --> 00:12:32,300
tools like Parcel assets has been a
center of it from the beginning

182
00:12:32,300 --> 00:12:36,130
One thing it sets parcel apart for many
others that they actually don't use

183
00:12:36,130 --> 00:12:40,970
JavaScript as the entry point but HTML
so what is considered an asset and many

184
00:12:40,970 --> 00:12:45,860
other build tools is their main entry
points for in Parcel land and that makes

185
00:12:45,860 --> 00:12:49,580
sense because on the web that is the
thing we go to we go to HTML pages and

186
00:12:49,580 --> 00:12:54,410
from there on we reference assets so
whether you're reference an image from

187
00:12:54,410 --> 00:12:59,570
JavaScript or from within HTML, Parcel
will understand that and that's actually

188
00:12:59,570 --> 00:13:04,490
really cool and it does this to many
many layers so if your reference a CSS

189
00:13:04,490 --> 00:13:09,589
file from HTML and that CSS file
references in images all of these things

190
00:13:09,589 --> 00:13:13,820
are tracked by Parcel and there will be
hashed and they will get a version

191
00:13:13,820 --> 00:13:18,080
number and whatnot so it actually builds
an entire asset graph

192
00:13:18,080 --> 00:13:22,140
[Marko] What Surma just explained
is called asset hash cascading

193
00:13:22,140 --> 00:13:27,100
if one file in a graph is updated, then the
file hash changes

194
00:13:27,100 --> 00:13:33,320
and because of that, hash of the file that used the updated asset should also change

195
00:13:33,320 --> 00:13:38,440
this is important so that we can control cache for better performance

196
00:13:38,440 --> 00:13:41,100
let's see how Rollup handles it

197
00:13:41,100 --> 00:13:46,080
Yeah so right now
hashing is Rollup's weakness

198
00:13:46,080 --> 00:13:48,460
and it's something they know about and it's
something

199
00:13:48,460 --> 00:13:51,600
they are going to be working on fixing very very soon

200
00:13:51,600 --> 00:13:55,960
so when you generate the hash for a file you know

201
00:13:55,960 --> 00:14:00,320
that little bit of the file names to
go at the end, all of the hex letters and numbers

202
00:14:00,320 --> 00:14:05,330
you need to do that as late
in the process as possible and you want

203
00:14:05,330 --> 00:14:08,440
it to just be based on the contents of
the file like not the directory it's in

204
00:14:08,440 --> 00:14:10,720
not your config settings anything like
that

205
00:14:10,720 --> 00:14:13,800
if you've got JavaScript which imports JavaScript which imports JavaScript

206
00:14:13,800 --> 00:14:15,960
it does the right thing with hashing

207
00:14:15,960 --> 00:14:19,840
you know you change a leaf one 
and it changes all of the other ones in the chain

208
00:14:19,840 --> 00:14:21,940
because you know all the URLs have updated

209
00:14:21,940 --> 00:14:26,340
whereas with assets you use a magic string in Rollup to

210
00:14:26,340 --> 00:14:30,780
to...and Rollup will change that to be the assets URL but it does that after hashing

211
00:14:30,780 --> 00:14:33,860
so you update your asset it changes hash

212
00:14:33,860 --> 00:14:38,580
it updates the JavaScript file fine 
but it doesn't update the hash of that JavaScript

213
00:14:38,580 --> 00:14:42,260
so, it's a weakness but they are fixing it

214
00:14:42,260 --> 00:14:47,560
[Mariko] these differences and gotchas in our build tools are constant source of frustration

215
00:14:47,560 --> 00:14:52,720
as Una said, the best tool for the job
really depends on your project

216
00:14:52,720 --> 00:14:57,740
And so, we wanted to make it easier for you to navigate this landscape

217
00:14:57,740 --> 00:15:01,740
tooling.report is a new website that gives developers like you

218
00:15:01,740 --> 00:15:06,040
an overview of various features supported by different build tools

219
00:15:06,040 --> 00:15:11,180
we built this website so you can evaluate and choose the right tools for your next project

220
00:15:11,180 --> 00:15:15,620
or maybe you are in the middle of migrating frontend infrastructure

221
00:15:15,620 --> 00:15:17,080
and hitting a road block

222
00:15:17,080 --> 00:15:20,780
tooling.report should help you answer your questions

223
00:15:20,780 --> 00:15:24,700
we've essentially written a test suite for different tools

224
00:15:24,700 --> 00:15:27,080
based on common web development practices

225
00:15:27,080 --> 00:15:30,060
so you can read why those tests are relevant

226
00:15:30,060 --> 00:15:32,960
and see how each tool handles it

227
00:15:32,960 --> 00:15:35,940
and when you are ready to implement it yourself

228
00:15:35,940 --> 00:15:43,500
you can look at our test code to see how you might integrate certain features into your build setup

229
00:15:43,500 --> 00:15:48,080
we also welcome your contributions so if you think
certain features should get tested

230
00:15:48,080 --> 00:15:51,060
please raise an issue on the repo

